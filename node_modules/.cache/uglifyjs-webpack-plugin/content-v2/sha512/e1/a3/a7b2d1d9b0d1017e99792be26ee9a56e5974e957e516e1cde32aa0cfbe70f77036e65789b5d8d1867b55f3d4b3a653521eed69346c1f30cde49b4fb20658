{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"/Users/sanjaymahto/Desktop/Build Demos/webpackBuildPOC/src/grid.js\",\"/Users/sanjaymahto/Desktop/Build Demos/webpackBuildPOC/src/index.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"Grid\",\"_classCallCheck\",\"this\",\"_createClass\",\"key\",\"csv\",\"flag\",\"previousStateArray\",\"csvData\",\"CSVToArray\",\"strData\",\"strDelimiter\",\"objPattern\",\"RegExp\",\"arrData\",\"arrMatches\",\"exec\",\"strMatchedDelimiter\",\"length\",\"push\",\"strMatchedValue\",\"replace\",\"CSV2JSON\",\"array\",\"objArray\",\"k\",\"JSON\",\"stringify\",\"data\",\"parse\",\"canvas\",\"document\",\"getElementById\",\"context\",\"getContext\",\"globalAlpha\",\"bw\",\"keys\",\"bh\",\"drawBoard\",\"clearRect\",\"width\",\"height\",\"x\",\"moveTo\",\"lineTo\",\"linearGradient2\",\"createLinearGradient\",\"addColorStop\",\"lineJoin\",\"strokeStyle\",\"stroke\",\"y\",\"count\",\"keyCount\",\"font\",\"fillStyle\",\"fillText\",\"changeHeader\",\"arguments\",\"undefined\",\"pixel\",\"family\",\"color\",\"align\",\"textAlign\",\"changeData\",\"console\",\"log\",\"pivotTable\",\"passedValues\",\"pivotingField\",\"pivotingOtherField\",\"list\",\"filter\",\"indexOf\",\"sort\",\"list1\",\"drawPivotBoard\",\"z1\",\"a\",\"b\",\"x1\",\"y1\",\"headerKeys\",\"i1\",\"splice\",\"index1\",\"pivotTableData\",\"h2\",\"tempDataArray\",\"h1\",\"temparray\",\"nameA\",\"toLowerCase\",\"nameB\",\"h3\",\"keyarr\",\"h4\",\"h5\",\"DataArray\",\"_loop\",\"p1\",\"tempObj\",\"_loop2\",\"p2\",\"arr\",\"map\",\"arrkeys\",\"_typeof\",\"max\",\"pd\",\"Math\",\"ceil\",\"tempArr\",\"i2\",\"columnSpan\",\"column\",\"spanRange\",\"span\",\"rowsSpan\",\"row\",\"y2\",\"mergeRow\",\"startRow\",\"endRow\",\"stateArray\",\"sessionStorage\",\"getItem\",\"stateFlag\",\"stateIndex\",\"restore\",\"save\",\"state\",\"setItem\",\"mergeColumn\",\"startColumn\",\"endColumn\",\"floor\",\"_grid\",\"window\",\"gridObj\",\"_gridObject\",\"create\",\"_grid2\",\"default\",\"mobx\",\"observable\",\"createGrid\",\"spy\",\"spyReport\",\"type\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 1);\\n\",\"\\n// A base class is defined using the new reserved 'class' keyword\\nmodule.exports = class Grid {\\n\\n    // This function will contain all code related to Grid...\\n    createGrid(csv) {\\n\\n        //Flag to deny the access to changeHeader or ChangeData if Table is Pivoted\\n        this.flag = 0;\\n\\n        //Defining an array to save the state\\n        let previousStateArray = [];\\n        // let csvData = `CITY,ZONE,PRODUCT,WEBVISIT,DOWNLOAD\\n        // BLR,KOR,FC,92,96,\\n        // BLR,KOR,FB,98,97,\\n        // BLR,INDR,FC,192,196,\\n        // BLR,INDR,FB,78,98,\\n        // KOL,SL,FC,122,135,\\n        // KOL,SL,FB,123,112`;\\n\\n        let csvData = csv;\\n\\n        //Logic to convert CSV to JSON Format....\\n        this.CSVToArray = function (strData, strDelimiter) {\\n            // Check to see if the delimiter is defined. If not,\\n            // then default to comma.\\n            strDelimiter = (strDelimiter || \\\",\\\");\\n            // Create a regular expression to parse the CSV values.\\n            var objPattern = new RegExp((\\n                // Delimiters.\\n                \\\"(\\\\\\\\\\\" + strDelimiter + \\\"|\\\\\\\\r?\\\\\\\\n|\\\\\\\\r|^)\\\" +\\n                // Quoted fields.\\n                \\\"(?:\\\\\\\"([^\\\\\\\"]*(?:\\\\\\\"\\\\\\\"[^\\\\\\\"]*)*)\\\\\\\"|\\\" +\\n                // Standard fields.\\n                \\\"([^\\\\\\\"\\\\\\\\\\\" + strDelimiter + \\\"\\\\\\\\r\\\\\\\\n]*))\\\"), \\\"gi\\\");\\n            // Create an array to hold our data. Give the array\\n            // a default empty first row.\\n            var arrData = [[]];\\n            // Create an array to hold our individual pattern\\n            // matching groups.\\n            var arrMatches = null;\\n            // Keep looping over the regular expression matches\\n            // until we can no longer find a match.\\n            while (arrMatches = objPattern.exec(strData)) {\\n                // Get the delimiter that was found.\\n                var strMatchedDelimiter = arrMatches[1];\\n                // Check to see if the given delimiter has a length\\n                // (is not the start of string) and if it matches\\n                // field delimiter. If id does not, then we know\\n                // that this delimiter is a row delimiter.\\n                if (strMatchedDelimiter.length && (strMatchedDelimiter != strDelimiter)) {\\n                    // Since we have reached a new row of data,\\n                    // add an empty row to our data array.\\n                    arrData.push([]);\\n                }\\n                // Now that we have our delimiter out of the way,\\n                // let's check to see which kind of value we\\n                // captured (quoted or unquoted).\\n                if (arrMatches[2]) {\\n                    // We found a quoted value. When we capture\\n                    // this value, unescape any double quotes.\\n                    var strMatchedValue = arrMatches[2].replace(\\n                        new RegExp(\\\"\\\\\\\"\\\\\\\"\\\", \\\"g\\\"), \\\"\\\\\\\"\\\");\\n                } else {\\n                    // We found a non-quoted value.\\n                    var strMatchedValue = arrMatches[3];\\n                }\\n                // Now that we have our value string, let's add\\n                // it to the data array.\\n                arrData[arrData.length - 1].push(strMatchedValue);\\n            }\\n            // Return the parsed data.\\n            return (arrData);\\n        }\\n\\n        this.CSV2JSON = function (csvData) {\\n            var array = this.CSVToArray(csvData);\\n            var objArray = [];\\n            for (var i = 1; i < array.length; i++) {\\n                objArray[i - 1] = {};\\n                for (var k = 0; k < array[0].length && k < array[i].length; k++) {\\n                    var key = array[0][k];\\n                    objArray[i - 1][key] = array[i][k]\\n                }\\n            }\\n\\n            var json = JSON.stringify(objArray);\\n            var str = json.replace(/},/g, \\\"},\\\\r\\\\n\\\");\\n\\n            return str;\\n        }\\n        //End of logic to convert CSV to JSON Format...\\n\\n        this.data = JSON.parse(this.CSV2JSON(csvData)); //Contains JSON converted Data from CSV\\n\\n        // console.log(\\\"JSON converted Data from CSV: \\\",this.data);\\n\\n        // Obtaining a reference to the canvas element.\\n        var canvas = document.getElementById(\\\"canvasTable\\\");\\n\\n        // Obtaining a 2D context from the canvas element.\\n        var context = canvas.getContext(\\\"2d\\\");\\n\\n        //to control the transparency of the table\\n        context.globalAlpha = 0.8;\\n\\n        //Logic to create a table\\n        let bw = (Object.keys(this.data[0]).length) * 200; //Calculating Border Width\\n        let bh = (this.data.length + 1) * 40; // Calculating Border Height\\n        var p = 10; //margin\\n\\n        //Function to draw table from JSON data...\\n        this.drawBoard = function () {\\n\\n            //To clear the canvas before drawing or redrawing the Table\\n            context.clearRect(0, 0, canvas.width, canvas.height);\\n\\n            // console.log(\\\"Border Width before Pivoting: \\\",bw);\\n            // console.log(\\\"Border Height before pivoting: \\\",bh);\\n\\n            //Drawing rows outline on the table...\\n            for (var x = 0; x <= bw; x += 200) {\\n                context.moveTo(0.5 + x + p, p);\\n                context.lineTo(0.5 + x + p, bh + p);\\n            }\\n\\n            //Drawing column outline on the table...\\n            for (var x = 0; x <= bh; x += 40) {\\n                context.moveTo(p, 0.5 + x + p);\\n                context.lineTo(bw + p, 0.5 + x + p);\\n            }\\n\\n            var linearGradient2 = context.createLinearGradient(125, 0, 225, 0);\\n            linearGradient2.addColorStop(0, 'rgb(255, 0,   0)');\\n            linearGradient2.addColorStop(0.5, 'rgb(  0, 0, 255)');\\n            linearGradient2.addColorStop(1, 'rgb(  0, 0,   0)');\\n\\n            context.lineJoin = \\\"round\\\";\\n\\n            context.strokeStyle = linearGradient2;\\n            context.stroke();\\n\\n            // //Setting properties for the border lines in the table drawn\\n            // context.strokeStyle = \\\"black\\\";\\n            // context.stroke();\\n\\n            let count; // Setting variable for counting the rows \\n\\n            let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n            // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n            //To print the values of the Table Excluding Header...\\n            for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                    context.font = \\\"normal 16px Verdana\\\";\\n                    context.fillStyle = 'black';\\n                    context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                    ++keyCount;\\n                }\\n                ++count;\\n            }\\n\\n            //To Print the Header... \\n            for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                context.font = \\\"bold 16px Verdana\\\";\\n                context.fillStyle = 'black';\\n                context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                ++keyCount;\\n            }\\n\\n            //To clear extra rows and table in the column in canvas when table restructures.\\n            context.clearRect(11, bh + 11, canvas.width, canvas.height)\\n            context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n        }\\n        this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n        //To change the Property of Header\\n        this.changeHeader = function (font = \\\"normal\\\", pixel = \\\"16px\\\", family = \\\"tahoma\\\", color = \\\"black\\\", align = \\\"left\\\") {\\n\\n            if (this.flag == 0) {\\n\\n                //Finding keys in each JSON\\n                let keys = Object.keys(this.data[0]);\\n\\n                for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                    context.textAlign = `${align}`;\\n                    context.font = `${font} ${pixel} ${family}`;\\n                    context.fillStyle = `${color}`;\\n                    context.clearRect(0.5 + x + p + 5, p, 200, 40);\\n                    context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                    ++keyCount;\\n                }\\n\\n                //Drawing rows on the table...\\n                for (var x = 0; x <= bw; x += 200) {\\n                    context.moveTo(0.5 + x + p, p);\\n                    context.lineTo(0.5 + x + p, bh + p);\\n                }\\n\\n                //Drawing column on the table...\\n                for (var x = 0; x <= bh; x += 40) {\\n                    context.moveTo(p, 0.5 + x + p);\\n                    context.lineTo(bw + p, 0.5 + x + p);\\n                }\\n                context.strokeStyle = \\\"black\\\";\\n                context.stroke();\\n\\n            }\\n            else {\\n                return \\\"Table has been pivoted\\\"\\n            }\\n        }\\n\\n        //to change the Property of data values of Table...\\n        this.changeData = function (font = \\\"normal\\\", pixel = \\\"16px\\\", family = \\\"tahoma\\\", color = \\\"black\\\", align = \\\"left\\\") {\\n\\n            if (this.flag == 0) {\\n                let count;\\n                let keys = Object.keys(this.data[0]);\\n                console.log(keys);\\n                for (let y = 40, count = 0; y < bh; y += 40) {\\n\\n                    for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                        context.textAlign = `${align}`\\n                        context.font = `${font} ${pixel} ${family}`;\\n                        context.fillStyle = `${color}`;\\n                        context.clearRect(0.5 + x + p + 5, y, 200, 40); // clears a text field 200 x 40, above baseline\\n                        context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y + 40);\\n                        ++keyCount;\\n\\n                    }\\n                    ++count;\\n                }\\n\\n                //Drawing rows on the table...\\n                for (var x = 0; x <= bw; x += 200) {\\n                    context.moveTo(0.5 + x + p, p);\\n                    context.lineTo(0.5 + x + p, bh + p);\\n                }\\n\\n                //Drawing column on the table...\\n                for (var x = 0; x <= bh; x += 40) {\\n                    context.moveTo(p, 0.5 + x + p);\\n                    context.lineTo(bw + p, 0.5 + x + p);\\n                }\\n                context.strokeStyle = \\\"black\\\";\\n                context.stroke();\\n\\n            }\\n            else {\\n                return \\\"Table has been Pivoted!\\\"\\n            }\\n        }\\n\\n\\n        //Logic to pivot the table or Flat the values of the table...\\n        this.pivotTable = function () {\\n\\n            //Setting flag to stop Changing the property of Header and Data Values...\\n            this.flag = 1;\\n\\n            if (arguments.length < 3) {\\n                return \\\"please pass all the arguments\\\";\\n            }\\n            else {\\n                let passedValues = arguments; // Passing the arguments array to the passedValues variable\\n\\n                let pivotingField = []; // Defining an Array to filter the Unique fields in the selected column to pivot\\n\\n                let pivotingOtherField = []; //Defining an array to filter the Unique elements in the primary key column to pivot\\n\\n                for (var i = 0; i < this.data.length; i++) {\\n                    pivotingField.push((this.data[i])[arguments[0]])\\n                }\\n                let list = pivotingField.filter((x, i, pivotingField) => pivotingField.indexOf(x) == i); // Array containing Unique Elements of the column Provided.\\n\\n                list = list.sort(); // Sorting the pivoting column field\\n\\n                //Logic for Creating grid for pivoting Table:\\n\\n                let keys = Object.keys(this.data[0]); //Getting the keys of JSON object.\\n\\n                //Logic to find the Border Width\\n                var bw = ((keys.length - (arguments.length - 1)) * 200) + (((arguments.length - 2)) * (list.length) * 200); // Logic for calculating the Border width.\\n\\n                //logic for finding unique element in the Primary key Column\\n                for (var i = 0; i < this.data.length; i++) {\\n                    pivotingOtherField.push((this.data[i])[arguments[(arguments.length - 1)]]);\\n                }\\n\\n                let list1 = pivotingOtherField.filter((x, i, pivotingOtherField) => pivotingOtherField.indexOf(x) == i); //Array Containing Unique Elements of the Primary key Provided\\n\\n                // Logic for calculating the Border Height.\\n                var bh = (list1.length + 2) * 40;\\n\\n                var p = 10; //Margin \\n\\n                //fucntion to draw pivoted table on Canvas\\n                this.drawPivotBoard = function () {\\n\\n                    context.clearRect(10.5, 10, canvas.width, canvas.height)\\n\\n                    //Drawing rows on the table...\\n                    for (var x = 0; x <= bw; x += 200) {\\n\\n                        context.moveTo(0.5 + x + p, p);\\n                        context.lineTo(0.5 + x + p, bh + p);\\n\\n                    }\\n\\n                    //Drawing column on the table...\\n                    for (var x = 0; x <= bh; x += 40) {\\n\\n                        context.moveTo(p, 0.5 + x + p);\\n                        context.lineTo(bw + p, 0.5 + x + p);\\n\\n                    }\\n                    context.strokeStyle = \\\"black\\\";\\n                    context.stroke();\\n\\n                    // let keys1 = Object.keys(this.data[0]);\\n\\n                    //logic for rowSpan\\n                    for (let z1 = 0; z1 < ((keys.length - 1) - (passedValues.length - 2)); z1++) {\\n                        if (z1 == 0) {\\n                            var a = 11, b = 50, c = 199, d = 3;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        a += 200;\\n                    }\\n\\n                    //logic for columnSpan\\n                    for (let x1 = 0; x1 < passedValues.length - 2; x1++) {\\n                        var a;\\n                        if (x1 == 0) {\\n                            a = (((keys.length - 1) - (passedValues.length - 2)) * 200) + 200 + 10.5, b = 10.5, c = 3, d = 39.5;\\n                        }\\n                        for (let y1 = 0; y1 < list.length; y1++) {\\n                            if (y1 == list.length - 1) {\\n                                a += 200;\\n                                break;\\n                            }\\n                            context.clearRect(a, b, c, d)\\n                            a += 200;\\n                        }\\n                    }\\n\\n                    //logic to remove the extra boxes...\\n                    context.clearRect(10.5, bh + 10.5, canvas.width, canvas.height);\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height);\\n\\n\\n                    //logic to create header...\\n                    //Removing column to pivot element from header\\n                    let headerKeys = keys; //Storing the Keys of the objects in headerKeys Variable\\n\\n                    //Logic to remove the choosen column to be pivoted \\n                    for (var i1 = headerKeys.length - 1; i1--;) {\\n                        if (headerKeys[i1] === passedValues[0]) headerKeys.splice(i1, 1);\\n                    }\\n\\n                    for (var i1 = 1; i1 < passedValues.length - 1; i1++) {\\n                        console.log(passedValues[i1]);\\n                        let index1 = headerKeys.indexOf(passedValues[i1]);\\n                        headerKeys.splice(index1, 1);\\n                    }\\n\\n                    for (var i1 = 1; i1 < passedValues.length - 1; i1++) {\\n                        headerKeys.push(passedValues[i1]);\\n                    }\\n                    console.log(headerKeys);\\n\\n                    //Logic to print the data into the table for the pivoting table...\\n                    let pivotTableData = [];\\n\\n                    for (let h2 = 0; h2 < list1.length; h2++) {\\n                        let tempDataArray = [];\\n                        for (let h1 = 0; h1 < this.data.length; h1++) {\\n\\n                            if ((this.data[h1])[passedValues[passedValues.length - 1]] == list1[h2]) {\\n                                // delete this.data[h1][passedValues[0]];\\n                                tempDataArray.push(this.data[h1]);\\n                            }\\n                        }\\n                        tempDataArray = tempDataArray.sort(function (a, b) {\\n                            // console.log(a[passedValues[0]]);\\n                            // console.log(b[passedValues[0]]);\\n                            var nameA = a[passedValues[0]].toLowerCase(), nameB = b[passedValues[0]].toLowerCase()\\n                            if (nameA < nameB) //sort string ascending\\n                                return -1\\n                            if (nameA > nameB)\\n                                return 1\\n                            return 0\\n                        });\\n\\n                        let temparray = tempDataArray;\\n                        for (let h3 = 0; h3 < temparray.length; h3++) {\\n                            let keyarr = [];\\n                            for (let h4 = 0; h4 < passedValues.length - 1; h4++) {\\n                                keyarr.push(temparray[h3][passedValues[h4]]);\\n                                delete temparray[h3][passedValues[h4]];\\n                            }\\n                            // console.log(keyarr);\\n                            for (let h5 = 1; h5 < keyarr.length; h5++) {\\n                                for (let h4 = 1; h4 < passedValues.length - 1; h4++) {\\n                                    temparray[h3][passedValues[h4]] = keyarr[h5];\\n                                }\\n                            }\\n                        }\\n\\n                        pivotTableData.push(temparray);\\n\\n                    }\\n                    console.log(\\\"aggregated data: \\\", pivotTableData);\\n\\n                    //Logic to print the data to the Canvas...\\n\\n                    //To print the value of the Table Excluding Header...\\n\\n                    var DataArray = [];\\n                    for (let p1 = 0; p1 < pivotTableData.length; p1++) {\\n\\n                        var tempObj = {};\\n                        for (let p2 = 0; p2 < pivotTableData[p1].length; p2++) {\\n                            // console.log(pivotTableData[p1][p2]);\\n                            var arr = Object.keys(pivotTableData[p1][p2]).map(function (key) { return pivotTableData[p1][p2][key]; });\\n                            var arrkeys = Object.keys(pivotTableData[p1][p2]);\\n                            console.log(\\\"array: \\\", arr);\\n                            for (var count = 0; count < arr.length;) {\\n                                if (count < (headerKeys.length - (passedValues.length - 2))) {\\n                                    tempObj[headerKeys[count]] = (arr)[count];\\n                                    ++count;\\n                                }\\n                                else {\\n\\n                                    if (count == headerKeys.length) {\\n                                        break;\\n                                    }\\n                                    if (typeof (tempObj[arrkeys[count]]) != 'object') {\\n                                        tempObj[arrkeys[count]] = [];\\n                                    }\\n                                    tempObj[arrkeys[count]].push((arr)[count]);\\n                                    console.log(((arr)[count]));\\n                                    ++count;\\n\\n                                }\\n                            }\\n\\n                        }\\n                        DataArray.push(tempObj);\\n                    }\\n                    // console.log(\\\"Pivot Table Data Array: \\\", DataArray);\\n\\n                    //To print the data into the pivot table...\\n\\n                    for (let y = 120, max = 0, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n\\n                            context.font = \\\"normal 16px tahoma\\\";\\n                            context.fillStyle = 'black';\\n\\n                            if (keyCount < (headerKeys.length - (passedValues.length - 2))) {\\n                                context.fillText((DataArray[count])[keys[keyCount]], 0.5 + x + 15, y);\\n                                ++keyCount;\\n                            }\\n                            else {\\n\\n                                max = list.length;\\n                                for (let pd = 0; pd < max; pd++) {\\n                                    if (((DataArray[count])[keys[keyCount]][pd]) == undefined || ((DataArray[count])[keys[keyCount]][pd]) == null || ((DataArray[count])[keys[keyCount]][pd]) == \\\"\\\") {\\n                                        context.fillText(\\\"\\\", 0.5 + x + 15, y);\\n                                    }\\n                                    else {\\n                                        context.fillText(((DataArray[count])[keys[keyCount]][pd]), 0.5 + x + 15, y);\\n                                    }\\n                                    x += 200\\n                                }\\n                                x -= 200;\\n                                ++keyCount;\\n                            }\\n\\n                        }\\n                        ++count;\\n                        if (count == DataArray.length) {\\n                            break;\\n                        }\\n                    }\\n\\n                    //To Print the Header... \\n                    for (let x = 0, keyCount = 0; x <= bw; x += 200) {\\n                        context.font = \\\"bold 19px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (keyCount < (headerKeys.length - (passedValues.length - 2))) {\\n                            context.fillText(headerKeys[keyCount], 0.5 + x + 70, 60);\\n                            ++keyCount;\\n                        }\\n                        else {\\n                            if (keyCount == headerKeys.length) {\\n                                break;\\n                            }\\n                            else {\\n                                if (list.length == 1) {\\n\\n                                    // console.log(Math.ceil(list.length / 2));\\n                                    context.fillText(headerKeys[keyCount], 0.5 + ((Math.ceil(list.length / 2)) * 200 + (x - 160.5)) + 15, 10 + 25);\\n                                    ++keyCount\\n                                    x = (Math.ceil(list.length / 2)) * 200 + (x - 160.5);\\n                                    // console.log(keyCount);\\n                                }\\n                                else {\\n\\n                                    // console.log(Math.ceil(list.length / 2));\\n                                    context.fillText(headerKeys[keyCount], 0.5 + ((Math.ceil(list.length / 2)) * 200 + (x - 160.5)) + 15, 10 + 25);\\n                                    ++keyCount\\n                                    x = (Math.ceil(list.length / 2)) * 200 + x;\\n                                    // console.log(keyCount);\\n                                }\\n                            }\\n                        }\\n                    }\\n\\n                    //to print the second line of header...\\n                    for (let x = 0, keyCount = 0; x <= bw; x += 200) {\\n                        context.font = \\\"bold 19px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (keyCount < (headerKeys.length - (passedValues.length - 2))) {\\n\\n                            ++keyCount;\\n                        }\\n                        else {\\n                            if (keyCount == keys.length) {\\n                                break;\\n                            }\\n                            else {\\n                                var tempArr = list;\\n                                for (var i2 = 0; i2 < tempArr.length; i2++) {\\n                                    context.fillText(tempArr[i2], 0.5 + x + 15, 10 + 25 + 40);\\n                                    x += 200;\\n                                }\\n                                x -= 200;\\n                                ++keyCount;\\n                            }\\n                        }\\n\\n                    }\\n\\n                }\\n                this.drawPivotBoard();\\n            }\\n            return true;\\n        }\\n\\n        //Logic to span the column or row\\n        this.columnSpan = function (column, spanRange) {\\n\\n            if (this.flag == 0 && spanRange > 1 && column <= Object.keys(this.data[0]).length) {\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n                    var span = spanRange;\\n                    bw = (Object.keys(this.data[0]).length) * 200 + 200 * (span - 1); //Calculating Border Width\\n\\n                    let bh = (this.data.length + 1) * 40; // Calculating Border Height\\n                    var p = 10; //margin\\n                    console.log(canvas.width);\\n                    console.log(canvas.height);\\n                    //To clear the canvas before drawing or redrawing the Table\\n                    context.clearRect(0, 0, canvas.width, canvas.height);\\n                    //Drawing rows outline on the table...\\n                    for (var x = 0; x <= bw; x += 200) {\\n                        context.moveTo(0.5 + x + p, p);\\n                        context.lineTo(0.5 + x + p, bh + p);\\n                    }\\n\\n\\n                    //Drawing column outline on the table...\\n                    for (var x = 0; x <= bh; x += 40) {\\n                        context.moveTo(p, 0.5 + x + p);\\n                        context.lineTo(bw + p, 0.5 + x + p);\\n                    }\\n                    //Setting properties for the border lines in the table drawn\\n                    context.strokeStyle = \\\"black\\\";\\n                    context.stroke();\\n\\n\\n                    //logic for columnSpan\\n\\n                    for (let y1 = 0; y1 < (span - 1); y1++) {\\n                        var a, b, c, d;\\n                        if (y1 == 0) {\\n                            a = column * 200 + p + .5;\\n                            b = 11;\\n                            c = .5;\\n                            d = bh - 1;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        a += 200;\\n                    }\\n\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    //To print the values of the Table Excluding Header...\\n                    for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                            context.font = \\\"normal 16px Verdana\\\";\\n                            context.fillStyle = 'black';\\n                            if (keyCount == (column - 1)) {\\n                                context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                                ++keyCount;\\n                                x += ((spanRange) * 200)\\n                            }\\n                            context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                            ++keyCount;\\n                        }\\n                        ++count;\\n                    }\\n\\n                    //To Print the Header... \\n                    for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                        context.font = \\\"bold 16px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (keyCount == (column - 1)) {\\n                            context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                            ++keyCount;\\n                            x += ((spanRange - 1) * 200)\\n                        }\\n                        else {\\n                            context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                            ++keyCount;\\n                        }\\n                    }\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n        }\\n\\n        //Logic to span the Column or row\\n        this.rowsSpan = function (row, spanRange) {\\n            if (this.flag == 0 && spanRange > 1 && row <= this.data.length) {\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n                    var span = spanRange;\\n                    bh = (this.data.length + 1) * 40 + 40 * (span - 1); // Calculating Border Height\\n                    bw = (Object.keys(this.data[0]).length) * 200; //Calculating Border Width\\n                    var p = 10; //margin\\n                    console.log(canvas.width);\\n                    console.log(canvas.height);\\n                    //To clear the canvas before drawing or redrawing the Table\\n                    context.clearRect(0, 0, canvas.width, canvas.height);\\n                    //Drawing rows outline on the table...\\n                    for (var x = 0; x <= bw; x += 200) {\\n                        context.moveTo(0.5 + x + p, p);\\n                        context.lineTo(0.5 + x + p, bh + p);\\n                    }\\n\\n                    //Drawing column outline on the table...\\n                    for (var x = 0; x <= bh; x += 40) {\\n                        context.moveTo(p, 0.5 + x + p);\\n                        context.lineTo(bw + p, 0.5 + x + p);\\n                    }\\n                    //Setting properties for the border lines in the table drawn\\n                    context.strokeStyle = \\\"black\\\";\\n                    context.stroke();\\n\\n\\n                    //logic for columnSpan\\n\\n                    for (let y1 = 0; y1 < (span - 1); y1++) {\\n                        var a, b, c, d;\\n                        for (let y2 = 0; y2 <= bw; y2 += 200) {\\n\\n                            if (y1 == 0) {\\n                                a = 11;\\n                                b = (row + 1) * 40 + p;\\n                                c = y2 - 1;\\n                                d = .5;\\n                            }\\n                            context.clearRect(a, b, c, d)\\n\\n                        }\\n                        b += 40;\\n                    }\\n\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    //To print the values of the Table Excluding Header...\\n                    for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                            context.font = \\\"normal 16px Verdana\\\";\\n                            context.fillStyle = 'black';\\n                            if (count == (row - 1)) {\\n                                context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y + 40 * ((spanRange - 1) / 2));\\n                            }\\n                            else {\\n                                context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                            }\\n                            ++keyCount;\\n                        }\\n\\n                        if (count == (row - 1)) {\\n                            y += ((spanRange - 1) * 40)\\n                        }\\n\\n                        ++count;\\n                    }\\n\\n                    //To Print the Header... \\n                    for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                        context.font = \\\"bold 16px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                        ++keyCount;\\n\\n                    }\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n        }\\n\\n        //Logic to Merge Row\\n        this.mergeRow = function (column, startRow, endRow) {\\n\\n            //to get the previous states...\\n            let stateArray = JSON.parse(sessionStorage.getItem(\\\"previousState\\\"));\\n            console.log(\\\"Previous State array: \\\", stateArray);\\n\\n            let stateFlag = 0;\\n\\n            if(stateArray != null)\\n            {\\n            for (let stateIndex = 0; stateIndex < stateArray.length; stateIndex++) {\\n\\n                console.log(stateArray[stateIndex]);\\n                console.log(stateArray[stateIndex][\\\"column\\\"]);\\n                console.log(stateArray[stateIndex][\\\"startRow\\\"]);\\n                console.log(stateArray[stateIndex][\\\"endRow\\\"]);\\n                if (stateArray[stateIndex][\\\"column\\\"] == column) {\\n                    console.log(\\\"Entered in to if condition\\\");\\n                    if (startRow >= stateArray[stateIndex][\\\"startRow\\\"] && startRow <= stateArray[stateIndex][\\\"endRow\\\"]) {\\n                        stateFlag = 2;\\n                        break;\\n                    }\\n                    else\\n                    {\\n                        if(endRow >= stateArray[stateIndex][\\\"startRow\\\"] && endRow <= stateArray[stateIndex][\\\"endRow\\\"])\\n                        {\\n                            stateFlag = 2;\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if(stateFlag == 0)\\n            {\\n                stateFlag = 1;\\n            }\\n        }\\n        else\\n        {\\n            stateFlag = 1;\\n        }\\n\\n            if (this.flag == 0 && stateFlag == 1 && column <= this.data.length && endRow > startRow && startRow != endRow) {\\n\\n                //Function to restore the Canavas... \\n                context.restore();\\n\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n\\n                    console.log(\\\"Canvas Width: \\\", canvas.width);\\n                    console.log(\\\"Canvas Height: \\\", canvas.height);\\n\\n                    //logic for rowSpan\\n\\n                    for (let y2 = 0, count = 0; y2 <= bh; y2 += 40) {\\n                        var a, b, c, d;\\n\\n                        if (count == (endRow - startRow)) {\\n                            break;\\n                        }\\n                        if (y2 == 0) {\\n                            a = (column - 1) * 200 + 11;\\n                            b = (startRow + 1) * 40 + p;\\n                            c = 199;\\n                            d = 1;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        b += 40;\\n                        ++count;\\n                    }\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    // //To print the values of the Table Excluding Header...\\n                    for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                            context.font = \\\"normal 16px Verdana\\\";\\n                            context.fillStyle = 'black';\\n                            if ((keyCount + 1) == column && count < endRow && count + 1 > startRow) {\\n\\n                                context.clearRect((column - 1) * 200 + 11, (startRow) * 40 + 11, 199, (39 + (endRow - startRow) * 40));\\n                                context.fillText((this.data[startRow - 1])[keys[keyCount]], 0.5 + x + p + 5, (startRow + 1) * 40 + 40 * ((endRow - startRow) / 2));\\n\\n                            }\\n                            // else {\\n                            //     context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                            // }\\n                            ++keyCount;\\n                        }\\n                        ++count;\\n                    }\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                    context.save();\\n\\n                    let state = {\\n                        \\\"column\\\": column,\\n                        \\\"startRow\\\": startRow,\\n                        \\\"endRow\\\": endRow\\n                    }\\n\\n                    previousStateArray.push(state);\\n\\n                    sessionStorage.setItem(\\\"previousState\\\", JSON.stringify(previousStateArray));\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n\\n        }\\n\\n        //Logic to merge the column\\n        this.mergeColumn = function (row, startColumn, endColumn) {\\n\\n            if (this.flag == 0 && row <= this.data.length + 1 && endColumn > startColumn && startColumn != endColumn) {\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n\\n                    console.log(\\\"Canvas Width: \\\", canvas.width);\\n                    console.log(\\\"Canvas Height: \\\", canvas.height);\\n\\n                    //To clear the canvas before drawing or redrawing the Table\\n                    context.clearRect(0, 0, canvas.width, canvas.height);\\n\\n                    //Drawing rows outline on the table...\\n                    for (var x = 0; x <= bw; x += 200) {\\n                        context.moveTo(0.5 + x + p, p);\\n                        context.lineTo(0.5 + x + p, bh + p);\\n                    }\\n\\n                    //Drawing column outline on the table...\\n                    for (var x = 0; x <= bh; x += 40) {\\n                        context.moveTo(p, 0.5 + x + p);\\n                        context.lineTo(bw + p, 0.5 + x + p);\\n                    }\\n\\n                    //Setting properties for the border lines in the table drawn\\n                    context.strokeStyle = \\\"black\\\";\\n                    context.stroke();\\n\\n                    //logic for rowSpan\\n                    for (let y2 = 0, count = 0; y2 <= bw; y2 += 200) {\\n                        var a, b, c, d;\\n\\n                        if (count == (endColumn - startColumn)) {\\n\\n                            break;\\n                        }\\n                        if (y2 == 0) {\\n                            a = (startColumn) * 200 + p;\\n                            b = (row - 1) * 40 + 11;\\n                            c = 2;\\n                            d = 39;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        a += 200;\\n                        ++count;\\n                    }\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    //To Print the Header... \\n                    for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                        context.font = \\\"bold 16px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (row == 1) {\\n                            if (keyCount + 1 >= startColumn && keyCount < endColumn) {\\n                                context.clearRect((row - 1) * 40 + 11, (startColumn) * 200 + 11, (endColumn) * 199, 39);\\n                                context.fillText(keys[startColumn - 1], (startColumn * 200 + (Math.floor((endColumn - startColumn) / 2)) * 200) - 100, 40 - 5);\\n                            }\\n                            else {\\n                                context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                            }\\n                        }\\n                        else {\\n                            context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                        }\\n                        ++keyCount;\\n\\n                    }\\n\\n\\n                    //To print the values of the Table Excluding Header...\\n                    for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                            context.font = \\\"normal 16px Verdana\\\";\\n                            context.fillStyle = 'black';\\n                            if (count + 2 == row) {\\n                                if (keyCount + 1 >= startColumn && keyCount < endColumn) {\\n                                    context.clearRect((row - 1) * 40 + 11, (startColumn) * 200 + 11, (endColumn) * 199, 39);\\n                                    context.fillText(this.data[row - 2][keys[startColumn - 1]], (startColumn * 200 + (Math.floor((endColumn - startColumn) / 2)) * 200) - 100, y - 5);\\n                                }\\n                                else {\\n                                    context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                                }\\n                            }\\n                            else {\\n                                context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                            }\\n                            ++keyCount;\\n                        }\\n                        ++count;\\n                    }\\n\\n\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                    context.save();\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n\\n        }\\n\\n        return true;\\n    }\\n\\n};\",\"// var gridTable = require('./grid.js');\\nimport gridTable from './grid.js'\\n\\n((window) => {\\n    \\\"use strict\\\";\\n\\n    //Function to create a Grid.\\n    function myGrid() {\\n\\n        let _gridObject = {};\\n\\n        var gridObj;\\n        //Function to create a Grid.\\n        _gridObject.create = function (csv) {\\n             gridObj = new gridTable(); //Constructor for creating new Grid \\n            mobx.observable(gridObj);\\n            mobx.observable(gridObj.createGrid(`CITY,ZONE,PRODUCT,WEBVISIT,DOWNLOAD\\n            BLR,KOR,FC,92,96,\\n            BLR,KOR,FB,98,97,\\n            BLR,KOR,FM,67,56,\\n            BLR,INDR,FC,192,196,\\n            BLR,INDR,FB,78,98,\\n            BLR,INDR,FM,12,43,\\n            KOL,SL,FC,122,135,\\n            KOL,SL,FB,123,112\\n            KOL,SL,FM,55,78`));\\n            mobx.observable(gridObj.pivotTable(\\\"PRODUCT\\\",\\\"DOWNLOAD\\\",\\\"WEBVISIT\\\",\\\"ZONE\\\"));\\n            return gridObj;\\n        };\\n\\n         //SPY in mobx\\n         mobx.spy(function (spyReport) {\\n            if (spyReport.type) {\\n                console.log(spyReport.type + ': ', spyReport);\\n            }\\n        });\\n        \\n        return _gridObject;\\n    }\\n\\n    // We need that our library is globally accesible, then we save in the window\\n    if (typeof (window.Grid) === 'undefined') {\\n        window.Grid = myGrid();\\n    }\\n\\n})(window); // We send the window variable withing our function\"]}","code":"!function(t){var e={};function o(r){if(e[r])return e[r].exports;var l=e[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},o.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,\"a\",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p=\"\",o(o.s=1)}([function(t,e,o){\"use strict\";var r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},l=function(){function t(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,o,r){return o&&t(e.prototype,o),r&&t(e,r),e}}();t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t)}return l(t,[{key:\"createGrid\",value:function(t){this.flag=0;var e=[],o=t;this.CSVToArray=function(t,e){e=e||\",\";for(var o=new RegExp(\"(\\\\\"+e+'|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\"\\\\'+e+\"\\\\r\\\\n]*))\",\"gi\"),r=[[]],l=null;l=o.exec(t);){var a=l[1];if(a.length&&a!=e&&r.push([]),l[2])var n=l[2].replace(new RegExp('\"\"',\"g\"),'\"');else n=l[3];r[r.length-1].push(n)}return r},this.CSV2JSON=function(t){for(var e=this.CSVToArray(t),o=[],r=1;r<e.length;r++){o[r-1]={};for(var l=0;l<e[0].length&&l<e[r].length;l++){var a=e[0][l];o[r-1][a]=e[r][l]}}return JSON.stringify(o).replace(/},/g,\"},\\r\\n\")},this.data=JSON.parse(this.CSV2JSON(o));var l=document.getElementById(\"canvasTable\"),a=l.getContext(\"2d\");a.globalAlpha=.8;var n=200*Object.keys(this.data[0]).length,i=40*(this.data.length+1),h=10;return this.drawBoard=function(){a.clearRect(0,0,l.width,l.height);for(var t=0;t<=n;t+=200)a.moveTo(.5+t+h,h),a.lineTo(.5+t+h,i+h);for(t=0;t<=i;t+=40)a.moveTo(h,.5+t+h),a.lineTo(n+h,.5+t+h);var e=a.createLinearGradient(125,0,225,0);e.addColorStop(0,\"rgb(255, 0,   0)\"),e.addColorStop(.5,\"rgb(  0, 0, 255)\"),e.addColorStop(1,\"rgb(  0, 0,   0)\"),a.lineJoin=\"round\",a.strokeStyle=e,a.stroke();for(var o=Object.keys(this.data[0]),r=80,f=0;r<=i;r+=40){for(var s=0,c=0;s<n;s+=200)a.font=\"normal 16px Verdana\",a.fillStyle=\"black\",a.fillText(this.data[f][o[c]],.5+s+h+5,r),++c;++f}for(var g=0,d=0;g<n;g+=200)a.font=\"bold 16px Verdana\",a.fillStyle=\"black\",a.fillText(o[d],.5+g+h+5,35),++d;a.clearRect(11,i+11,l.width,l.height),a.clearRect(n+11,9.5,l.width,l.height)},this.drawBoard(),this.changeHeader=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"normal\",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"16px\",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"tahoma\",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\"black\",l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:\"left\";if(0!=this.flag)return\"Table has been pivoted\";for(var f=Object.keys(this.data[0]),s=0,c=0;s<n;s+=200)a.textAlign=\"\"+l,a.font=t+\" \"+e+\" \"+o,a.fillStyle=\"\"+r,a.clearRect(.5+s+h+5,h,200,40),a.fillText(f[c],.5+s+h+5,35),++c;for(var g=0;g<=n;g+=200)a.moveTo(.5+g+h,h),a.lineTo(.5+g+h,i+h);for(g=0;g<=i;g+=40)a.moveTo(h,.5+g+h),a.lineTo(n+h,.5+g+h);a.strokeStyle=\"black\",a.stroke()},this.changeData=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"normal\",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"16px\",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"tahoma\",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\"black\",l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:\"left\";if(0!=this.flag)return\"Table has been Pivoted!\";var f=Object.keys(this.data[0]);console.log(f);for(var s=40,c=0;s<i;s+=40){for(var g=0,d=0;g<n;g+=200)a.textAlign=\"\"+l,a.font=t+\" \"+e+\" \"+o,a.fillStyle=\"\"+r,a.clearRect(.5+g+h+5,s,200,40),a.fillText(this.data[c][f[d]],.5+g+h+5,s+40),++d;++c}for(var v=0;v<=n;v+=200)a.moveTo(.5+v+h,h),a.lineTo(.5+v+h,i+h);for(v=0;v<=i;v+=40)a.moveTo(h,.5+v+h),a.lineTo(n+h,.5+v+h);a.strokeStyle=\"black\",a.stroke()},this.pivotTable=function(){if(this.flag=1,arguments.length<3)return\"please pass all the arguments\";for(var t=arguments,e=[],o=[],n=0;n<this.data.length;n++)e.push(this.data[n][arguments[0]]);var i=e.filter(function(t,e,o){return o.indexOf(t)==e});i=i.sort();var h=Object.keys(this.data[0]),f=200*(h.length-(arguments.length-1))+(arguments.length-2)*i.length*200;for(n=0;n<this.data.length;n++)o.push(this.data[n][arguments[arguments.length-1]]);var s=o.filter(function(t,e,o){return o.indexOf(t)==e}),c=40*(s.length+2),g=10;return this.drawPivotBoard=function(){a.clearRect(10.5,10,l.width,l.height);for(var e=0;e<=f;e+=200)a.moveTo(.5+e+g,g),a.lineTo(.5+e+g,c+g);for(e=0;e<=c;e+=40)a.moveTo(g,.5+e+g),a.lineTo(f+g,.5+e+g);a.strokeStyle=\"black\",a.stroke();for(var o=0;o<h.length-1-(t.length-2);o++){if(0==o)var n=11,d=50,v=199,u=3;a.clearRect(n,d,v,u),n+=200}for(var b=0;b<t.length-2;b++){0==b&&(n=200*(h.length-1-(t.length-2))+200+10.5,d=10.5,v=3,u=39.5);for(var p=0;p<i.length;p++){if(p==i.length-1){n+=200;break}a.clearRect(n,d,v,u),n+=200}}a.clearRect(10.5,c+10.5,l.width,l.height),a.clearRect(f+11,9.5,l.width,l.height);for(var y=h,T=y.length-1;T--;)y[T]===t[0]&&y.splice(T,1);for(T=1;T<t.length-1;T++){console.log(t[T]);var k=y.indexOf(t[T]);y.splice(k,1)}for(T=1;T<t.length-1;T++)y.push(t[T]);console.log(y);for(var w=[],x=0;x<s.length;x++){for(var m=[],R=0;R<this.data.length;R++)this.data[R][t[t.length-1]]==s[x]&&m.push(this.data[R]);for(var S=m=m.sort(function(e,o){var r=e[t[0]].toLowerCase(),l=o[t[0]].toLowerCase();return r<l?-1:r>l?1:0}),O=0;O<S.length;O++){for(var B=[],C=0;C<t.length-1;C++)B.push(S[O][t[C]]),delete S[O][t[C]];for(var j=1;j<B.length;j++)for(var L=1;L<t.length-1;L++)S[O][t[L]]=B[j]}w.push(S)}console.log(\"aggregated data: \",w);for(var V=[],N=function(e){I={};for(var o=function(o){for(D=Object.keys(w[e][o]).map(function(t){return w[e][o][t]}),P=Object.keys(w[e][o]),console.log(\"array: \",D),E=0;E<D.length;)if(E<y.length-(t.length-2))I[y[E]]=D[E],++E;else{if(E==y.length)break;\"object\"!=r(I[P[E]])&&(I[P[E]]=[]),I[P[E]].push(D[E]),console.log(D[E]),++E}},l=0;l<w[e].length;l++)o(l);V.push(I)},M=0;M<w.length;M++){var I,D,P,E;N(M)}for(var F=120,A=0,J=0;F<=c;F+=40){for(var K=0,W=0;K<f;K+=200)if(a.font=\"normal 16px tahoma\",a.fillStyle=\"black\",W<y.length-(t.length-2))a.fillText(V[J][h[W]],.5+K+15,F),++W;else{A=i.length;for(var _=0;_<A;_++)void 0==V[J][h[W]][_]||null==V[J][h[W]][_]||\"\"==V[J][h[W]][_]?a.fillText(\"\",.5+K+15,F):a.fillText(V[J][h[W]][_],.5+K+15,F),K+=200;K-=200,++W}if(++J==V.length)break}for(var G=0,H=0;G<=f;G+=200)if(a.font=\"bold 19px Verdana\",a.fillStyle=\"black\",H<y.length-(t.length-2))a.fillText(y[H],.5+G+70,60),++H;else{if(H==y.length)break;1==i.length?(a.fillText(y[H],200*Math.ceil(i.length/2)+(G-160.5)+.5+15,35),++H,G=200*Math.ceil(i.length/2)+(G-160.5)):(a.fillText(y[H],200*Math.ceil(i.length/2)+(G-160.5)+.5+15,35),++H,G=200*Math.ceil(i.length/2)+G)}for(var U=0,Z=0;U<=f;U+=200)if(a.font=\"bold 19px Verdana\",a.fillStyle=\"black\",Z<y.length-(t.length-2))++Z;else{if(Z==h.length)break;for(var Y=i,q=0;q<Y.length;q++)a.fillText(Y[q],.5+U+15,75),U+=200;U-=200,++Z}},this.drawPivotBoard(),!0},this.columnSpan=function(t,e){0==this.flag&&e>1&&t<=Object.keys(this.data[0]).length&&(this.drawBoard=function(){var o=e;n=200*Object.keys(this.data[0]).length+200*(o-1);var r=40*(this.data.length+1),i=10;console.log(l.width),console.log(l.height),a.clearRect(0,0,l.width,l.height);for(var h=0;h<=n;h+=200)a.moveTo(.5+h+i,i),a.lineTo(.5+h+i,r+i);for(h=0;h<=r;h+=40)a.moveTo(i,.5+h+i),a.lineTo(n+i,.5+h+i);a.strokeStyle=\"black\",a.stroke();for(var f=0;f<o-1;f++){var s,c,g,d;0==f&&(s=200*t+i+.5,c=11,g=.5,d=r-1),a.clearRect(s,c,g,d),s+=200}for(var v=Object.keys(this.data[0]),u=80,b=0;u<=r;u+=40){for(var p=0,y=0;p<n;p+=200)a.font=\"normal 16px Verdana\",a.fillStyle=\"black\",y==t-1&&(a.fillText(this.data[b][v[y]],.5+p+i+5,u),++y,p+=200*e),a.fillText(this.data[b][v[y]],.5+p+i+5,u),++y;++b}for(var T=0,k=0;T<n;T+=200)a.font=\"bold 16px Verdana\",a.fillStyle=\"black\",k==t-1?(a.fillText(v[k],.5+T+i+5,35),++k,T+=200*(e-1)):(a.fillText(v[k],.5+T+i+5,35),++k);console.log(\"bh bw:\",r,n),a.clearRect(10,r+11,l.width,l.height),a.clearRect(n+11,9.5,l.width,l.height)},this.drawBoard())},this.rowsSpan=function(t,e){0==this.flag&&e>1&&t<=this.data.length&&(this.drawBoard=function(){var o=e;i=40*(this.data.length+1)+40*(o-1),n=200*Object.keys(this.data[0]).length;var r=10;console.log(l.width),console.log(l.height),a.clearRect(0,0,l.width,l.height);for(var h=0;h<=n;h+=200)a.moveTo(.5+h+r,r),a.lineTo(.5+h+r,i+r);for(h=0;h<=i;h+=40)a.moveTo(r,.5+h+r),a.lineTo(n+r,.5+h+r);a.strokeStyle=\"black\",a.stroke();for(var f=0;f<o-1;f++){for(var s,c,g,d,v=0;v<=n;v+=200)0==f&&(s=11,c=40*(t+1)+r,g=v-1,d=.5),a.clearRect(s,c,g,d);c+=40}for(var u=Object.keys(this.data[0]),b=80,p=0;b<=i;b+=40){for(var y=0,T=0;y<n;y+=200)a.font=\"normal 16px Verdana\",a.fillStyle=\"black\",p==t-1?a.fillText(this.data[p][u[T]],.5+y+r+5,b+(e-1)/2*40):a.fillText(this.data[p][u[T]],.5+y+r+5,b),++T;p==t-1&&(b+=40*(e-1)),++p}for(var k=0,w=0;k<n;k+=200)a.font=\"bold 16px Verdana\",a.fillStyle=\"black\",a.fillText(u[w],.5+k+r+5,35),++w;console.log(\"bh bw:\",i,n),a.clearRect(10,i+11,l.width,l.height),a.clearRect(n+11,9.5,l.width,l.height)},this.drawBoard())},this.mergeRow=function(t,o,r){var f=JSON.parse(sessionStorage.getItem(\"previousState\"));console.log(\"Previous State array: \",f);var s=0;if(null!=f){for(var c=0;c<f.length;c++)if(console.log(f[c]),console.log(f[c].column),console.log(f[c].startRow),console.log(f[c].endRow),f[c].column==t){if(console.log(\"Entered in to if condition\"),o>=f[c].startRow&&o<=f[c].endRow){s=2;break}if(r>=f[c].startRow&&r<=f[c].endRow){s=2;break}}0==s&&(s=1)}else s=1;0==this.flag&&1==s&&t<=this.data.length&&r>o&&o!=r&&(a.restore(),this.drawBoard=function(){console.log(\"Canvas Width: \",l.width),console.log(\"Canvas Height: \",l.height);for(var f=0,s=0;f<=i;f+=40){var c,g,d,v;if(s==r-o)break;0==f&&(c=200*(t-1)+11,g=40*(o+1)+h,d=199,v=1),a.clearRect(c,g,d,v),g+=40,++s}for(var u=Object.keys(this.data[0]),b=80,p=0;b<=i;b+=40){for(var y=0,T=0;y<n;y+=200)a.font=\"normal 16px Verdana\",a.fillStyle=\"black\",T+1==t&&p<r&&p+1>o&&(a.clearRect(200*(t-1)+11,40*o+11,199,39+40*(r-o)),a.fillText(this.data[o-1][u[T]],.5+y+h+5,40*(o+1)+(r-o)/2*40)),++T;++p}console.log(\"bh bw:\",i,n),a.clearRect(10,i+11,l.width,l.height),a.clearRect(n+11,9.5,l.width,l.height),a.save();var k={column:t,startRow:o,endRow:r};e.push(k),sessionStorage.setItem(\"previousState\",JSON.stringify(e))},this.drawBoard())},this.mergeColumn=function(t,e,o){0==this.flag&&t<=this.data.length+1&&o>e&&e!=o&&(this.drawBoard=function(){console.log(\"Canvas Width: \",l.width),console.log(\"Canvas Height: \",l.height),a.clearRect(0,0,l.width,l.height);for(var r=0;r<=n;r+=200)a.moveTo(.5+r+h,h),a.lineTo(.5+r+h,i+h);for(r=0;r<=i;r+=40)a.moveTo(h,.5+r+h),a.lineTo(n+h,.5+r+h);a.strokeStyle=\"black\",a.stroke();for(var f=0,s=0;f<=n;f+=200){var c,g,d,v;if(s==o-e)break;0==f&&(c=200*e+h,g=40*(t-1)+11,d=2,v=39),a.clearRect(c,g,d,v),c+=200,++s}for(var u=Object.keys(this.data[0]),b=0,p=0;b<n;b+=200)a.font=\"bold 16px Verdana\",a.fillStyle=\"black\",1==t&&p+1>=e&&p<o?(a.clearRect(40*(t-1)+11,200*e+11,199*o,39),a.fillText(u[e-1],200*e+200*Math.floor((o-e)/2)-100,35)):a.fillText(u[p],.5+b+h+5,35),++p;for(var y=80,T=0;y<=i;y+=40){for(var k=0,w=0;k<n;k+=200)a.font=\"normal 16px Verdana\",a.fillStyle=\"black\",T+2==t&&w+1>=e&&w<o?(a.clearRect(40*(t-1)+11,200*e+11,199*o,39),a.fillText(this.data[t-2][u[e-1]],200*e+200*Math.floor((o-e)/2)-100,y-5)):a.fillText(this.data[T][u[w]],.5+k+h+5,y),++w;++T}console.log(\"bh bw:\",i,n),a.clearRect(10,i+11,l.width,l.height),a.clearRect(n+11,9.5,l.width,l.height),a.save()},this.drawBoard())},!0}}]),t}()},function(t,e,o){\"use strict\";var r,l=o(0),a=(r=l)&&r.__esModule?r:{default:r};!function(t){var e,o;void 0===t.Grid&&(t.Grid=((o={}).create=function(t){return e=new a.default,mobx.observable(e),mobx.observable(e.createGrid(\"CITY,ZONE,PRODUCT,WEBVISIT,DOWNLOAD\\n            BLR,KOR,FC,92,96,\\n            BLR,KOR,FB,98,97,\\n            BLR,KOR,FM,67,56,\\n            BLR,INDR,FC,192,196,\\n            BLR,INDR,FB,78,98,\\n            BLR,INDR,FM,12,43,\\n            KOL,SL,FC,122,135,\\n            KOL,SL,FB,123,112\\n            KOL,SL,FM,55,78\")),mobx.observable(e.pivotTable(\"PRODUCT\",\"DOWNLOAD\",\"WEBVISIT\",\"ZONE\")),e},mobx.spy(function(t){t.type&&console.log(t.type+\": \",t)}),o))}(window)}]);","extractedComments":[]}