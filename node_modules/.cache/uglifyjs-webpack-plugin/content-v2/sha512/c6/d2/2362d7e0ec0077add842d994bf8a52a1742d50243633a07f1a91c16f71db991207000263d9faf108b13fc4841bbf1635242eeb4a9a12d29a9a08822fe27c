{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"/Users/sanjaymahto/Desktop/Build Demos/webpackBuildPOC/src/grid.js\",\"/Users/sanjaymahto/Desktop/Build Demos/webpackBuildPOC/src/index.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"Grid\",\"_classCallCheck\",\"this\",\"_createClass\",\"key\",\"csv\",\"flag\",\"previousStateArray\",\"csvData\",\"CSVToArray\",\"strData\",\"strDelimiter\",\"objPattern\",\"RegExp\",\"arrData\",\"arrMatches\",\"exec\",\"strMatchedDelimiter\",\"length\",\"push\",\"strMatchedValue\",\"replace\",\"CSV2JSON\",\"array\",\"objArray\",\"k\",\"JSON\",\"stringify\",\"data\",\"parse\",\"canvas\",\"document\",\"getElementById\",\"context\",\"getContext\",\"globalAlpha\",\"bw\",\"keys\",\"bh\",\"drawBoard\",\"clearRect\",\"width\",\"height\",\"x\",\"moveTo\",\"lineTo\",\"linearGradient2\",\"createLinearGradient\",\"addColorStop\",\"lineJoin\",\"strokeStyle\",\"stroke\",\"y\",\"count\",\"keyCount\",\"font\",\"fillStyle\",\"fillText\",\"save\",\"changeHeader\",\"arguments\",\"undefined\",\"pixel\",\"family\",\"color\",\"align\",\"textAlign\",\"changeData\",\"console\",\"log\",\"pivotTable\",\"passedValues\",\"pivotingField\",\"pivotingOtherField\",\"list\",\"filter\",\"indexOf\",\"sort\",\"list1\",\"drawPivotBoard\",\"z1\",\"a\",\"b\",\"x1\",\"y1\",\"headerKeys\",\"i1\",\"splice\",\"index1\",\"pivotTableData\",\"h2\",\"tempDataArray\",\"h1\",\"temparray\",\"nameA\",\"toLowerCase\",\"nameB\",\"h3\",\"keyarr\",\"h4\",\"h5\",\"DataArray\",\"_loop\",\"p1\",\"tempObj\",\"_loop2\",\"p2\",\"arr\",\"map\",\"arrkeys\",\"_typeof\",\"max\",\"pd\",\"Math\",\"ceil\",\"tempArr\",\"i2\",\"columnSpan\",\"column\",\"spanRange\",\"span\",\"rowsSpan\",\"row\",\"y2\",\"mergeRow\",\"startRow\",\"endRow\",\"stateArray\",\"sessionStorage\",\"getItem\",\"stateFlag\",\"stateIndex\",\"alert\",\"restore\",\"state\",\"setItem\",\"mergeColumn\",\"startColumn\",\"endColumn\",\"Count\",\"floor\",\"_grid\",\"window\",\"gridObj\",\"_gridObject\",\"create\",\"_grid2\",\"default\",\"mobx\",\"observable\",\"createGrid\",\"spy\",\"spyReport\",\"type\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 1);\\n\",\"\\n// A base class is defined using the new reserved 'class' keyword\\nmodule.exports = class Grid {\\n\\n    // This function will contain all code related to Grid...\\n    createGrid(csv) {\\n\\n        //Flag to deny the access to changeHeader or ChangeData if Table is Pivoted\\n        this.flag = 0;\\n\\n        //Defining an array to save the state\\n        let previousStateArray = [];\\n        // let csvData = `CITY,ZONE,PRODUCT,WEBVISIT,DOWNLOAD\\n        // BLR,KOR,FC,92,96,\\n        // BLR,KOR,FB,98,97,\\n        // BLR,INDR,FC,192,196,\\n        // BLR,INDR,FB,78,98,\\n        // KOL,SL,FC,122,135,\\n        // KOL,SL,FB,123,112`;\\n\\n        let csvData = csv;\\n\\n        //Logic to convert CSV to JSON Format....\\n        this.CSVToArray = function (strData, strDelimiter) {\\n            // Check to see if the delimiter is defined. If not,\\n            // then default to comma.\\n            strDelimiter = (strDelimiter || \\\",\\\");\\n            // Create a regular expression to parse the CSV values.\\n            var objPattern = new RegExp((\\n                // Delimiters.\\n                \\\"(\\\\\\\\\\\" + strDelimiter + \\\"|\\\\\\\\r?\\\\\\\\n|\\\\\\\\r|^)\\\" +\\n                // Quoted fields.\\n                \\\"(?:\\\\\\\"([^\\\\\\\"]*(?:\\\\\\\"\\\\\\\"[^\\\\\\\"]*)*)\\\\\\\"|\\\" +\\n                // Standard fields.\\n                \\\"([^\\\\\\\"\\\\\\\\\\\" + strDelimiter + \\\"\\\\\\\\r\\\\\\\\n]*))\\\"), \\\"gi\\\");\\n            // Create an array to hold our data. Give the array\\n            // a default empty first row.\\n            var arrData = [[]];\\n            // Create an array to hold our individual pattern\\n            // matching groups.\\n            var arrMatches = null;\\n            // Keep looping over the regular expression matches\\n            // until we can no longer find a match.\\n            while (arrMatches = objPattern.exec(strData)) {\\n                // Get the delimiter that was found.\\n                var strMatchedDelimiter = arrMatches[1];\\n                // Check to see if the given delimiter has a length\\n                // (is not the start of string) and if it matches\\n                // field delimiter. If id does not, then we know\\n                // that this delimiter is a row delimiter.\\n                if (strMatchedDelimiter.length && (strMatchedDelimiter != strDelimiter)) {\\n                    // Since we have reached a new row of data,\\n                    // add an empty row to our data array.\\n                    arrData.push([]);\\n                }\\n                // Now that we have our delimiter out of the way,\\n                // let's check to see which kind of value we\\n                // captured (quoted or unquoted).\\n                if (arrMatches[2]) {\\n                    // We found a quoted value. When we capture\\n                    // this value, unescape any double quotes.\\n                    var strMatchedValue = arrMatches[2].replace(\\n                        new RegExp(\\\"\\\\\\\"\\\\\\\"\\\", \\\"g\\\"), \\\"\\\\\\\"\\\");\\n                } else {\\n                    // We found a non-quoted value.\\n                    var strMatchedValue = arrMatches[3];\\n                }\\n                // Now that we have our value string, let's add\\n                // it to the data array.\\n                arrData[arrData.length - 1].push(strMatchedValue);\\n            }\\n            // Return the parsed data.\\n            return (arrData);\\n        }\\n\\n        this.CSV2JSON = function (csvData) {\\n            var array = this.CSVToArray(csvData);\\n            var objArray = [];\\n            for (var i = 1; i < array.length; i++) {\\n                objArray[i - 1] = {};\\n                for (var k = 0; k < array[0].length && k < array[i].length; k++) {\\n                    var key = array[0][k];\\n                    objArray[i - 1][key] = array[i][k]\\n                }\\n            }\\n\\n            var json = JSON.stringify(objArray);\\n            var str = json.replace(/},/g, \\\"},\\\\r\\\\n\\\");\\n\\n            return str;\\n        }\\n        //End of logic to convert CSV to JSON Format...\\n\\n        this.data = JSON.parse(this.CSV2JSON(csvData)); //Contains JSON converted Data from CSV\\n\\n        // console.log(\\\"JSON converted Data from CSV: \\\",this.data);\\n\\n        // Obtaining a reference to the canvas element.\\n        var canvas = document.getElementById(\\\"canvasTable\\\");\\n\\n        // Obtaining a 2D context from the canvas element.\\n        var context = canvas.getContext(\\\"2d\\\");\\n\\n        //to control the transparency of the table\\n        context.globalAlpha = 0.8;\\n\\n        //Logic to create a table\\n        let bw = (Object.keys(this.data[0]).length) * 200; //Calculating Border Width\\n        let bh = (this.data.length + 1) * 40; // Calculating Border Height\\n        var p = 10; //margin\\n\\n        //Function to draw table from JSON data...\\n        this.drawBoard = function () {\\n\\n            //To clear the canvas before drawing or redrawing the Table\\n            context.clearRect(0, 0, canvas.width, canvas.height);\\n\\n            // console.log(\\\"Border Width before Pivoting: \\\",bw);\\n            // console.log(\\\"Border Height before pivoting: \\\",bh);\\n\\n            //Drawing rows outline on the table...\\n            for (var x = 0; x <= bw; x += 200) {\\n                context.moveTo(0.5 + x + p, p);\\n                context.lineTo(0.5 + x + p, bh + p);\\n            }\\n\\n            //Drawing column outline on the table...\\n            for (var x = 0; x <= bh; x += 40) {\\n                context.moveTo(p, 0.5 + x + p);\\n                context.lineTo(bw + p, 0.5 + x + p);\\n            }\\n\\n            var linearGradient2 = context.createLinearGradient(125, 0, 225, 0);\\n            linearGradient2.addColorStop(0, 'rgb(255, 0,   0)');\\n            linearGradient2.addColorStop(0.5, 'rgb(  0, 0, 255)');\\n            linearGradient2.addColorStop(1, 'rgb(  0, 0,   0)');\\n\\n            context.lineJoin = \\\"round\\\";\\n\\n            context.strokeStyle = linearGradient2;\\n            context.stroke();\\n\\n            // //Setting properties for the border lines in the table drawn\\n            // context.strokeStyle = \\\"black\\\";\\n            // context.stroke();\\n\\n            let count; // Setting variable for counting the rows \\n\\n            let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n            // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n            //To print the values of the Table Excluding Header...\\n            for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                    context.font = \\\"normal 16px Verdana\\\";\\n                    context.fillStyle = 'black';\\n                    context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                    ++keyCount;\\n                }\\n                ++count;\\n            }\\n\\n            //To Print the Header... \\n            for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                context.font = \\\"bold 16px Verdana\\\";\\n                context.fillStyle = 'black';\\n                context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                ++keyCount;\\n            }\\n\\n            //To clear extra rows and table in the column in canvas when table restructures.\\n            context.clearRect(11, bh + 11, canvas.width, canvas.height)\\n            context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n        }\\n        this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n        context.save();\\n\\n        //To change the Property of Header\\n        this.changeHeader = function (font = \\\"normal\\\", pixel = \\\"16px\\\", family = \\\"tahoma\\\", color = \\\"black\\\", align = \\\"left\\\") {\\n\\n            if (this.flag == 0) {\\n\\n                //Finding keys in each JSON\\n                let keys = Object.keys(this.data[0]);\\n\\n                for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                    context.textAlign = `${align}`;\\n                    context.font = `${font} ${pixel} ${family}`;\\n                    context.fillStyle = `${color}`;\\n                    context.clearRect(0.5 + x + p + 5, p, 200, 40);\\n                    context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                    ++keyCount;\\n                }\\n\\n                //Drawing rows on the table...\\n                for (var x = 0; x <= bw; x += 200) {\\n                    context.moveTo(0.5 + x + p, p);\\n                    context.lineTo(0.5 + x + p, bh + p);\\n                }\\n\\n                //Drawing column on the table...\\n                for (var x = 0; x <= bh; x += 40) {\\n                    context.moveTo(p, 0.5 + x + p);\\n                    context.lineTo(bw + p, 0.5 + x + p);\\n                }\\n                context.strokeStyle = \\\"black\\\";\\n                context.stroke();\\n\\n            }\\n            else {\\n                return \\\"Table has been pivoted\\\"\\n            }\\n        }\\n\\n        //to change the Property of data values of Table...\\n        this.changeData = function (font = \\\"normal\\\", pixel = \\\"16px\\\", family = \\\"tahoma\\\", color = \\\"black\\\", align = \\\"left\\\") {\\n\\n            if (this.flag == 0) {\\n                let count;\\n                let keys = Object.keys(this.data[0]);\\n                console.log(keys);\\n                for (let y = 40, count = 0; y < bh; y += 40) {\\n\\n                    for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                        context.textAlign = `${align}`\\n                        context.font = `${font} ${pixel} ${family}`;\\n                        context.fillStyle = `${color}`;\\n                        context.clearRect(0.5 + x + p + 5, y, 200, 40); // clears a text field 200 x 40, above baseline\\n                        context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y + 40);\\n                        ++keyCount;\\n\\n                    }\\n                    ++count;\\n                }\\n\\n                //Drawing rows on the table...\\n                for (var x = 0; x <= bw; x += 200) {\\n                    context.moveTo(0.5 + x + p, p);\\n                    context.lineTo(0.5 + x + p, bh + p);\\n                }\\n\\n                //Drawing column on the table...\\n                for (var x = 0; x <= bh; x += 40) {\\n                    context.moveTo(p, 0.5 + x + p);\\n                    context.lineTo(bw + p, 0.5 + x + p);\\n                }\\n                context.strokeStyle = \\\"black\\\";\\n                context.stroke();\\n\\n            }\\n            else {\\n                return \\\"Table has been Pivoted!\\\"\\n            }\\n        }\\n\\n        //Logic to pivot the table or Flat the values of the table...\\n        this.pivotTable = function () {\\n\\n            //Setting flag to stop Changing the property of Header and Data Values...\\n            this.flag = 1;\\n\\n            if (arguments.length < 3) {\\n                return \\\"please pass all the arguments\\\";\\n            }\\n            else {\\n                let passedValues = arguments; // Passing the arguments array to the passedValues variable\\n\\n                let pivotingField = []; // Defining an Array to filter the Unique fields in the selected column to pivot\\n\\n                let pivotingOtherField = []; //Defining an array to filter the Unique elements in the primary key column to pivot\\n\\n                for (var i = 0; i < this.data.length; i++) {\\n                    pivotingField.push((this.data[i])[arguments[0]])\\n                }\\n                let list = pivotingField.filter((x, i, pivotingField) => pivotingField.indexOf(x) == i); // Array containing Unique Elements of the column Provided.\\n\\n                list = list.sort(); // Sorting the pivoting column field\\n\\n                //Logic for Creating grid for pivoting Table:\\n\\n                let keys = Object.keys(this.data[0]); //Getting the keys of JSON object.\\n\\n                //Logic to find the Border Width\\n                var bw = ((keys.length - (arguments.length - 1)) * 200) + (((arguments.length - 2)) * (list.length) * 200); // Logic for calculating the Border width.\\n\\n                //logic for finding unique element in the Primary key Column\\n                for (var i = 0; i < this.data.length; i++) {\\n                    pivotingOtherField.push((this.data[i])[arguments[(arguments.length - 1)]]);\\n                }\\n\\n                let list1 = pivotingOtherField.filter((x, i, pivotingOtherField) => pivotingOtherField.indexOf(x) == i); //Array Containing Unique Elements of the Primary key Provided\\n\\n                // Logic for calculating the Border Height.\\n                var bh = (list1.length + 2) * 40;\\n\\n                var p = 10; //Margin \\n\\n                //fucntion to draw pivoted table on Canvas\\n                this.drawPivotBoard = function () {\\n\\n                    context.clearRect(10.5, 10, canvas.width, canvas.height)\\n\\n                    //Drawing rows on the table...\\n                    for (var x = 0; x <= bw; x += 200) {\\n\\n                        context.moveTo(0.5 + x + p, p);\\n                        context.lineTo(0.5 + x + p, bh + p);\\n\\n                    }\\n\\n                    //Drawing column on the table...\\n                    for (var x = 0; x <= bh; x += 40) {\\n\\n                        context.moveTo(p, 0.5 + x + p);\\n                        context.lineTo(bw + p, 0.5 + x + p);\\n\\n                    }\\n                    context.strokeStyle = \\\"black\\\";\\n                    context.stroke();\\n\\n                    // let keys1 = Object.keys(this.data[0]);\\n\\n                    //logic for rowSpan\\n                    for (let z1 = 0; z1 < ((keys.length - 1) - (passedValues.length - 2)); z1++) {\\n                        if (z1 == 0) {\\n                            var a = 11, b = 50, c = 199, d = 3;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        a += 200;\\n                    }\\n\\n                    //logic for columnSpan\\n                    for (let x1 = 0; x1 < passedValues.length - 2; x1++) {\\n                        var a;\\n                        if (x1 == 0) {\\n                            a = (((keys.length - 1) - (passedValues.length - 2)) * 200) + 200 + 10.5, b = 10.5, c = 3, d = 39.5;\\n                        }\\n                        for (let y1 = 0; y1 < list.length; y1++) {\\n                            if (y1 == list.length - 1) {\\n                                a += 200;\\n                                break;\\n                            }\\n                            context.clearRect(a, b, c, d)\\n                            a += 200;\\n                        }\\n                    }\\n\\n                    //logic to remove the extra boxes...\\n                    context.clearRect(10.5, bh + 10.5, canvas.width, canvas.height);\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height);\\n\\n\\n                    //logic to create header...\\n                    //Removing column to pivot element from header\\n                    let headerKeys = keys; //Storing the Keys of the objects in headerKeys Variable\\n\\n                    //Logic to remove the choosen column to be pivoted \\n                    for (var i1 = headerKeys.length - 1; i1--;) {\\n                        if (headerKeys[i1] === passedValues[0]) headerKeys.splice(i1, 1);\\n                    }\\n\\n                    for (var i1 = 1; i1 < passedValues.length - 1; i1++) {\\n                        console.log(passedValues[i1]);\\n                        let index1 = headerKeys.indexOf(passedValues[i1]);\\n                        headerKeys.splice(index1, 1);\\n                    }\\n\\n                    for (var i1 = 1; i1 < passedValues.length - 1; i1++) {\\n                        headerKeys.push(passedValues[i1]);\\n                    }\\n                    console.log(headerKeys);\\n\\n                    //Logic to print the data into the table for the pivoting table...\\n                    let pivotTableData = [];\\n\\n                    for (let h2 = 0; h2 < list1.length; h2++) {\\n                        let tempDataArray = [];\\n                        for (let h1 = 0; h1 < this.data.length; h1++) {\\n\\n                            if ((this.data[h1])[passedValues[passedValues.length - 1]] == list1[h2]) {\\n                                // delete this.data[h1][passedValues[0]];\\n                                tempDataArray.push(this.data[h1]);\\n                            }\\n                        }\\n                        tempDataArray = tempDataArray.sort(function (a, b) {\\n                            // console.log(a[passedValues[0]]);\\n                            // console.log(b[passedValues[0]]);\\n                            var nameA = a[passedValues[0]].toLowerCase(), nameB = b[passedValues[0]].toLowerCase()\\n                            if (nameA < nameB) //sort string ascending\\n                                return -1\\n                            if (nameA > nameB)\\n                                return 1\\n                            return 0\\n                        });\\n\\n                        let temparray = tempDataArray;\\n                        for (let h3 = 0; h3 < temparray.length; h3++) {\\n                            let keyarr = [];\\n                            for (let h4 = 0; h4 < passedValues.length - 1; h4++) {\\n                                keyarr.push(temparray[h3][passedValues[h4]]);\\n                                delete temparray[h3][passedValues[h4]];\\n                            }\\n                            // console.log(keyarr);\\n                            for (let h5 = 1; h5 < keyarr.length; h5++) {\\n                                for (let h4 = 1; h4 < passedValues.length - 1; h4++) {\\n                                    temparray[h3][passedValues[h4]] = keyarr[h5];\\n                                }\\n                            }\\n                        }\\n\\n                        pivotTableData.push(temparray);\\n\\n                    }\\n                    console.log(\\\"aggregated data: \\\", pivotTableData);\\n\\n                    //Logic to print the data to the Canvas...\\n\\n                    //To print the value of the Table Excluding Header...\\n\\n                    var DataArray = [];\\n                    for (let p1 = 0; p1 < pivotTableData.length; p1++) {\\n\\n                        var tempObj = {};\\n                        for (let p2 = 0; p2 < pivotTableData[p1].length; p2++) {\\n                            // console.log(pivotTableData[p1][p2]);\\n                            var arr = Object.keys(pivotTableData[p1][p2]).map(function (key) { return pivotTableData[p1][p2][key]; });\\n                            var arrkeys = Object.keys(pivotTableData[p1][p2]);\\n                            console.log(\\\"array: \\\", arr);\\n                            for (var count = 0; count < arr.length;) {\\n                                if (count < (headerKeys.length - (passedValues.length - 2))) {\\n                                    tempObj[headerKeys[count]] = (arr)[count];\\n                                    ++count;\\n                                }\\n                                else {\\n\\n                                    if (count == headerKeys.length) {\\n                                        break;\\n                                    }\\n                                    if (typeof (tempObj[arrkeys[count]]) != 'object') {\\n                                        tempObj[arrkeys[count]] = [];\\n                                    }\\n                                    tempObj[arrkeys[count]].push((arr)[count]);\\n                                    console.log(((arr)[count]));\\n                                    ++count;\\n\\n                                }\\n                            }\\n\\n                        }\\n                        DataArray.push(tempObj);\\n                    }\\n                    // console.log(\\\"Pivot Table Data Array: \\\", DataArray);\\n\\n                    //To print the data into the pivot table...\\n\\n                    for (let y = 120, max = 0, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n\\n                            context.font = \\\"normal 16px tahoma\\\";\\n                            context.fillStyle = 'black';\\n\\n                            if (keyCount < (headerKeys.length - (passedValues.length - 2))) {\\n                                context.fillText((DataArray[count])[keys[keyCount]], 0.5 + x + 15, y);\\n                                ++keyCount;\\n                            }\\n                            else {\\n\\n                                max = list.length;\\n                                for (let pd = 0; pd < max; pd++) {\\n                                    if (((DataArray[count])[keys[keyCount]][pd]) == undefined || ((DataArray[count])[keys[keyCount]][pd]) == null || ((DataArray[count])[keys[keyCount]][pd]) == \\\"\\\") {\\n                                        context.fillText(\\\"\\\", 0.5 + x + 15, y);\\n                                    }\\n                                    else {\\n                                        context.fillText(((DataArray[count])[keys[keyCount]][pd]), 0.5 + x + 15, y);\\n                                    }\\n                                    x += 200\\n                                }\\n                                x -= 200;\\n                                ++keyCount;\\n                            }\\n\\n                        }\\n                        ++count;\\n                        if (count == DataArray.length) {\\n                            break;\\n                        }\\n                    }\\n\\n                    //To Print the Header... \\n                    for (let x = 0, keyCount = 0; x <= bw; x += 200) {\\n                        context.font = \\\"bold 19px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (keyCount < (headerKeys.length - (passedValues.length - 2))) {\\n                            context.fillText(headerKeys[keyCount], 0.5 + x + 70, 60);\\n                            ++keyCount;\\n                        }\\n                        else {\\n                            if (keyCount == headerKeys.length) {\\n                                break;\\n                            }\\n                            else {\\n                                if (list.length == 1) {\\n\\n                                    // console.log(Math.ceil(list.length / 2));\\n                                    context.fillText(headerKeys[keyCount], 0.5 + ((Math.ceil(list.length / 2)) * 200 + (x - 160.5)) + 15, 10 + 25);\\n                                    ++keyCount\\n                                    x = (Math.ceil(list.length / 2)) * 200 + (x - 160.5);\\n                                    // console.log(keyCount);\\n                                }\\n                                else {\\n\\n                                    // console.log(Math.ceil(list.length / 2));\\n                                    context.fillText(headerKeys[keyCount], 0.5 + ((Math.ceil(list.length / 2)) * 200 + (x - 160.5)) + 15, 10 + 25);\\n                                    ++keyCount\\n                                    x = (Math.ceil(list.length / 2)) * 200 + x;\\n                                    // console.log(keyCount);\\n                                }\\n                            }\\n                        }\\n                    }\\n\\n                    //to print the second line of header...\\n                    for (let x = 0, keyCount = 0; x <= bw; x += 200) {\\n                        context.font = \\\"bold 19px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (keyCount < (headerKeys.length - (passedValues.length - 2))) {\\n\\n                            ++keyCount;\\n                        }\\n                        else {\\n                            if (keyCount == keys.length) {\\n                                break;\\n                            }\\n                            else {\\n                                var tempArr = list;\\n                                for (var i2 = 0; i2 < tempArr.length; i2++) {\\n                                    context.fillText(tempArr[i2], 0.5 + x + 15, 10 + 25 + 40);\\n                                    x += 200;\\n                                }\\n                                x -= 200;\\n                                ++keyCount;\\n                            }\\n                        }\\n\\n                    }\\n\\n                }\\n                this.drawPivotBoard();\\n            }\\n            return true;\\n        }\\n\\n        //Logic to span the column or row\\n        this.columnSpan = function (column, spanRange) {\\n\\n            if (this.flag == 0 && spanRange > 1 && column <= Object.keys(this.data[0]).length) {\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n                    var span = spanRange;\\n                    bw = (Object.keys(this.data[0]).length) * 200 + 200 * (span - 1); //Calculating Border Width\\n\\n                    let bh = (this.data.length + 1) * 40; // Calculating Border Height\\n                    var p = 10; //margin\\n                    console.log(canvas.width);\\n                    console.log(canvas.height);\\n                    //To clear the canvas before drawing or redrawing the Table\\n                    context.clearRect(0, 0, canvas.width, canvas.height);\\n                    //Drawing rows outline on the table...\\n                    for (var x = 0; x <= bw; x += 200) {\\n                        context.moveTo(0.5 + x + p, p);\\n                        context.lineTo(0.5 + x + p, bh + p);\\n                    }\\n\\n\\n                    //Drawing column outline on the table...\\n                    for (var x = 0; x <= bh; x += 40) {\\n                        context.moveTo(p, 0.5 + x + p);\\n                        context.lineTo(bw + p, 0.5 + x + p);\\n                    }\\n                    //Setting properties for the border lines in the table drawn\\n                    context.strokeStyle = \\\"black\\\";\\n                    context.stroke();\\n\\n\\n                    //logic for columnSpan\\n\\n                    for (let y1 = 0; y1 < (span - 1); y1++) {\\n                        var a, b, c, d;\\n                        if (y1 == 0) {\\n                            a = column * 200 + p + .5;\\n                            b = 11;\\n                            c = .5;\\n                            d = bh - 1;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        a += 200;\\n                    }\\n\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    //To print the values of the Table Excluding Header...\\n                    for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                            context.font = \\\"normal 16px Verdana\\\";\\n                            context.fillStyle = 'black';\\n                            if (keyCount == (column - 1)) {\\n                                context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                                ++keyCount;\\n                                x += ((spanRange) * 200)\\n                            }\\n                            context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                            ++keyCount;\\n                        }\\n                        ++count;\\n                    }\\n\\n                    //To Print the Header... \\n                    for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                        context.font = \\\"bold 16px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (keyCount == (column - 1)) {\\n                            context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                            ++keyCount;\\n                            x += ((spanRange - 1) * 200)\\n                        }\\n                        else {\\n                            context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                            ++keyCount;\\n                        }\\n                    }\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n        }\\n\\n        //Logic to span the Column or row\\n        this.rowsSpan = function (row, spanRange) {\\n            if (this.flag == 0 && spanRange > 1 && row <= this.data.length) {\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n                    var span = spanRange;\\n                    bh = (this.data.length + 1) * 40 + 40 * (span - 1); // Calculating Border Height\\n                    bw = (Object.keys(this.data[0]).length) * 200; //Calculating Border Width\\n                    var p = 10; //margin\\n                    console.log(canvas.width);\\n                    console.log(canvas.height);\\n                    //To clear the canvas before drawing or redrawing the Table\\n                    context.clearRect(0, 0, canvas.width, canvas.height);\\n                    //Drawing rows outline on the table...\\n                    for (var x = 0; x <= bw; x += 200) {\\n                        context.moveTo(0.5 + x + p, p);\\n                        context.lineTo(0.5 + x + p, bh + p);\\n                    }\\n\\n                    //Drawing column outline on the table...\\n                    for (var x = 0; x <= bh; x += 40) {\\n                        context.moveTo(p, 0.5 + x + p);\\n                        context.lineTo(bw + p, 0.5 + x + p);\\n                    }\\n                    //Setting properties for the border lines in the table drawn\\n                    context.strokeStyle = \\\"black\\\";\\n                    context.stroke();\\n\\n\\n                    //logic for columnSpan\\n\\n                    for (let y1 = 0; y1 < (span - 1); y1++) {\\n                        var a, b, c, d;\\n                        for (let y2 = 0; y2 <= bw; y2 += 200) {\\n\\n                            if (y1 == 0) {\\n                                a = 11;\\n                                b = (row + 1) * 40 + p;\\n                                c = y2 - 1;\\n                                d = .5;\\n                            }\\n                            context.clearRect(a, b, c, d)\\n\\n                        }\\n                        b += 40;\\n                    }\\n\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    //To print the values of the Table Excluding Header...\\n                    for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                            context.font = \\\"normal 16px Verdana\\\";\\n                            context.fillStyle = 'black';\\n                            if (count == (row - 1)) {\\n                                context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y + 40 * ((spanRange - 1) / 2));\\n                            }\\n                            else {\\n                                context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                            }\\n                            ++keyCount;\\n                        }\\n\\n                        if (count == (row - 1)) {\\n                            y += ((spanRange - 1) * 40)\\n                        }\\n\\n                        ++count;\\n                    }\\n\\n                    //To Print the Header... \\n                    for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                        context.font = \\\"bold 16px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        context.fillText(keys[keyCount], 0.5 + x + p + 5, p + 25);\\n                        ++keyCount;\\n\\n                    }\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n        }\\n\\n        //Logic to Merge Row\\n        this.mergeRow = function (column, startRow, endRow) {\\n\\n            //to get the previous states...\\n            let stateArray = JSON.parse(sessionStorage.getItem(\\\"previousState\\\"));\\n            console.log(\\\"Previous State array: \\\", stateArray);\\n\\n            let stateFlag = 0;\\n\\n            if (stateArray != null) {\\n                for (let stateIndex = 0; stateIndex < stateArray.length; stateIndex++) {\\n\\n                    if (stateArray[stateIndex][\\\"column\\\"] == column) {\\n\\n                        if (startRow >= stateArray[stateIndex][\\\"startRow\\\"] && startRow <= stateArray[stateIndex][\\\"endRow\\\"]) {\\n                            stateFlag = 2;\\n                            alert(\\\"Invalid argument passed!\\\")\\n                            break;\\n                        }\\n                        else {\\n                            if (endRow >= stateArray[stateIndex][\\\"startRow\\\"] && endRow <= stateArray[stateIndex][\\\"endRow\\\"]) {\\n                                stateFlag = 2;\\n                                alert(\\\"Invalid argument passed!\\\")\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n\\n                if (stateFlag == 0) {\\n                    stateFlag = 1;\\n                }\\n            }\\n            else {\\n                stateFlag = 1;\\n            }\\n\\n            if (this.flag == 0 && stateFlag == 1 && column <= this.data.length && endRow > startRow && startRow != endRow) {\\n\\n                //Function to restore the Canavas... \\n                context.restore();\\n\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n\\n                    console.log(\\\"Canvas Width: \\\", canvas.width);\\n                    console.log(\\\"Canvas Height: \\\", canvas.height);\\n\\n                    //logic for rowSpan\\n\\n                    for (let y2 = 0, count = 0; y2 <= bh; y2 += 40) {\\n                        var a, b, c, d;\\n\\n                        if (count == (endRow - startRow)) {\\n                            break;\\n                        }\\n                        if (y2 == 0) {\\n                            a = (column - 1) * 200 + 11;\\n                            b = (startRow + 1) * 40 + p;\\n                            c = 199;\\n                            d = 1;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        b += 40;\\n                        ++count;\\n                    }\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    // //To print the values of the Table Excluding Header...\\n                    for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                        for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                            context.font = \\\"normal 16px Verdana\\\";\\n                            context.fillStyle = 'black';\\n                            if ((keyCount + 1) == column && count < endRow && count + 1 > startRow) {\\n\\n                                context.clearRect((column - 1) * 200 + 11, (startRow) * 40 + 11, 199, (39 + (endRow - startRow) * 40));\\n                                context.fillText((this.data[startRow - 1])[keys[keyCount]], 0.5 + x + p + 5, (startRow + 1) * 40 + 40 * ((endRow - startRow) / 2));\\n\\n                            }\\n                            // else {\\n                            //     context.fillText((this.data[count])[keys[keyCount]], 0.5 + x + p + 5, y);\\n                            // }\\n                            ++keyCount;\\n                        }\\n                        ++count;\\n                    }\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                    context.save();\\n\\n                    let state = {\\n                        \\\"column\\\": column,\\n                        \\\"startRow\\\": startRow,\\n                        \\\"endRow\\\": endRow\\n                    }\\n\\n                    previousStateArray.push(state);\\n\\n                    sessionStorage.setItem(\\\"previousState\\\", JSON.stringify(previousStateArray));\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n\\n        }\\n\\n        //Logic to merge the column\\n        this.mergeColumn = function (row, startColumn, endColumn) {\\n\\n            //to get the previous states...\\n            let stateArray = JSON.parse(sessionStorage.getItem(\\\"previousColumnState\\\"));\\n            console.log(\\\"Previous Column State array: \\\", stateArray);\\n\\n            let stateFlag = 0;\\n\\n            if (stateArray != null) {\\n                for (let stateIndex = 0; stateIndex < stateArray.length; stateIndex++) {\\n\\n                    if (stateArray[stateIndex][\\\"column\\\"] == column) {\\n\\n                        if (startRow >= stateArray[stateIndex][\\\"startRow\\\"] && startRow <= stateArray[stateIndex][\\\"endRow\\\"]) {\\n                            stateFlag = 2;\\n                            alert(\\\"Invalid argument passed!\\\")\\n                            break;\\n                        }\\n                        else {\\n                            if (endRow >= stateArray[stateIndex][\\\"startRow\\\"] && endRow <= stateArray[stateIndex][\\\"endRow\\\"]) {\\n                                stateFlag = 2;\\n                                alert(\\\"Invalid argument passed!\\\")\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n\\n                if (stateFlag == 0) {\\n                    stateFlag = 1;\\n                }\\n            }\\n            else {\\n                stateFlag = 1;\\n            }\\n\\n\\n            if (this.flag == 0 && stateFlag == 1 && row <= this.data.length + 1 && endColumn > startColumn && startColumn != endColumn) {\\n\\n                //Function to restore the Canavas... \\n                context.restore();\\n\\n                //Function to draw table from JSON data...\\n                this.drawBoard = function () {\\n\\n                    console.log(\\\"Canvas Width: \\\", canvas.width);\\n                    console.log(\\\"Canvas Height: \\\", canvas.height);\\n\\n                    //logic for columnSpan\\n                    for (let y2 = 0, count = 0; y2 <= bw; y2 += 200) {\\n                        var a, b, c, d;\\n\\n                        if (count == (endColumn - startColumn)) {\\n\\n                            break;\\n                        }\\n                        if (y2 == 0) {\\n                            a = (startColumn) * 200 + p;\\n                            b = (row - 1) * 40 + 11;\\n                            c = 2;\\n                            d = 39;\\n                        }\\n                        context.clearRect(a, b, c, d)\\n                        a += 200;\\n                        ++count;\\n                    }\\n\\n                    let count; // Setting variable for counting the rows \\n\\n                    let keys = Object.keys(this.data[0]); // finding keys in each JSON object\\n\\n                    // console.log(\\\"Total keys in each JSON object: \\\",keys);\\n\\n                    //To Print the Header... \\n                    for (let x = 0, Count = 1; x < bw; x += 200) {\\n                        context.font = \\\"bold 16px Verdana\\\";\\n                        context.fillStyle = 'black';\\n                        if (row == 1) {\\n                            if (Count >= startColumn && Count < endColumn) {\\n                                context.clearRect((row - 1) * 40 + 11, (startColumn - 1) * 200 + 11, (endColumn - startColumn) * 199, 39);\\n                                context.fillText(keys[startColumn - 1], (startColumn * 200 + (Math.floor((endColumn - startColumn) / 2)) * 200) - 100, 40 - 5);\\n                            }\\n                        }\\n                        ++Count;\\n                    }\\n\\n\\n                    //To print the values of the Table Excluding Header...\\n                    // for (let y = 80, count = 0; y <= bh; y += 40) {\\n\\n                    //     for (let x = 0, keyCount = 0; x < bw; x += 200) {\\n                    //         context.font = \\\"normal 16px Verdana\\\";\\n                    //         context.fillStyle = 'black';\\n                    //         if (count + 2 == row) {\\n                    //             if (keyCount + 1 >= startColumn && keyCount < endColumn) {\\n                    //                 context.clearRect((row - 1) * 40 + 11, (startColumn -1 ) * 200 + 11, (endColumn - startColumn) * 199, 39);\\n                    //                 context.fillText(this.data[row - 2][keys[startColumn - 1]], (startColumn * 200 + (Math.floor((endColumn - startColumn) / 2)) * 200) - 100, y - 5);\\n                    //             }\\n                    //         }\\n                    //         ++keyCount;\\n                    //     }\\n                    //     ++count;\\n                    // }\\n\\n\\n\\n                    console.log(\\\"bh bw:\\\", bh, bw)\\n                    //To clear extra rows and table in the column in canvas when table restructures.\\n                    context.clearRect(10, bh + 11, canvas.width, canvas.height)\\n                    context.clearRect(bw + 11, 9.5, canvas.width, canvas.height)\\n\\n                    context.save();\\n\\n                }\\n                this.drawBoard(); //Function call to draw the canvas on screen.\\n\\n            }\\n\\n        }\\n\\n        return true;\\n    }\\n\\n};\",\"// var gridTable = require('./grid.js');\\nimport gridTable from './grid.js'\\n\\n((window) => {\\n    \\\"use strict\\\";\\n\\n    //Function to create a Grid.\\n    function myGrid() {\\n\\n        let _gridObject = {};\\n\\n        var gridObj;\\n        //Function to create a Grid.\\n        _gridObject.create = function (csv) {\\n             gridObj = new gridTable(); //Constructor for creating new Grid \\n            mobx.observable(gridObj);\\n            mobx.observable(gridObj.createGrid(`CITY,ZONE,PRODUCT,WEBVISIT,DOWNLOAD\\n            BLR,KOR,FC,92,96,\\n            BLR,KOR,FB,98,97,\\n            BLR,KOR,FM,67,56,\\n            BLR,INDR,FC,192,196,\\n            BLR,INDR,FB,78,98,\\n            BLR,INDR,FM,12,43,\\n            KOL,SL,FC,122,135,\\n            KOL,SL,FB,123,112\\n            KOL,SL,FM,55,78`));\\n            mobx.observable(gridObj.pivotTable(\\\"PRODUCT\\\",\\\"DOWNLOAD\\\",\\\"WEBVISIT\\\",\\\"ZONE\\\"));\\n            return gridObj;\\n        };\\n\\n         //SPY in mobx\\n         mobx.spy(function (spyReport) {\\n            if (spyReport.type) {\\n                console.log(spyReport.type + ': ', spyReport);\\n            }\\n        });\\n        \\n        return _gridObject;\\n    }\\n\\n    // We need that our library is globally accesible, then we save in the window\\n    if (typeof (window.Grid) === 'undefined') {\\n        window.Grid = myGrid();\\n    }\\n\\n})(window); // We send the window variable withing our function\"]}","code":"!function(e){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:a})},r.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=1)}([function(e,t,r){\"use strict\";var a=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,\"value\"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}();e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e)}return o(e,[{key:\"createGrid\",value:function(e){this.flag=0;var t=[],r=e;this.CSVToArray=function(e,t){t=t||\",\";for(var r=new RegExp(\"(\\\\\"+t+'|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\"\\\\'+t+\"\\\\r\\\\n]*))\",\"gi\"),a=[[]],o=null;o=r.exec(e);){var l=o[1];if(l.length&&l!=t&&a.push([]),o[2])var n=o[2].replace(new RegExp('\"\"',\"g\"),'\"');else n=o[3];a[a.length-1].push(n)}return a},this.CSV2JSON=function(e){for(var t=this.CSVToArray(e),r=[],a=1;a<t.length;a++){r[a-1]={};for(var o=0;o<t[0].length&&o<t[a].length;o++){var l=t[0][o];r[a-1][l]=t[a][o]}}return JSON.stringify(r).replace(/},/g,\"},\\r\\n\")},this.data=JSON.parse(this.CSV2JSON(r));var o=document.getElementById(\"canvasTable\"),l=o.getContext(\"2d\");l.globalAlpha=.8;var n=200*Object.keys(this.data[0]).length,i=40*(this.data.length+1),h=10;return this.drawBoard=function(){l.clearRect(0,0,o.width,o.height);for(var e=0;e<=n;e+=200)l.moveTo(.5+e+h,h),l.lineTo(.5+e+h,i+h);for(e=0;e<=i;e+=40)l.moveTo(h,.5+e+h),l.lineTo(n+h,.5+e+h);var t=l.createLinearGradient(125,0,225,0);t.addColorStop(0,\"rgb(255, 0,   0)\"),t.addColorStop(.5,\"rgb(  0, 0, 255)\"),t.addColorStop(1,\"rgb(  0, 0,   0)\"),l.lineJoin=\"round\",l.strokeStyle=t,l.stroke();for(var r=Object.keys(this.data[0]),a=80,s=0;a<=i;a+=40){for(var f=0,c=0;f<n;f+=200)l.font=\"normal 16px Verdana\",l.fillStyle=\"black\",l.fillText(this.data[s][r[c]],.5+f+h+5,a),++c;++s}for(var g=0,d=0;g<n;g+=200)l.font=\"bold 16px Verdana\",l.fillStyle=\"black\",l.fillText(r[d],.5+g+h+5,35),++d;l.clearRect(11,i+11,o.width,o.height),l.clearRect(n+11,9.5,o.width,o.height)},this.drawBoard(),l.save(),this.changeHeader=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"normal\",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"16px\",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"tahoma\",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\"black\",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:\"left\";if(0!=this.flag)return\"Table has been pivoted\";for(var s=Object.keys(this.data[0]),f=0,c=0;f<n;f+=200)l.textAlign=\"\"+o,l.font=e+\" \"+t+\" \"+r,l.fillStyle=\"\"+a,l.clearRect(.5+f+h+5,h,200,40),l.fillText(s[c],.5+f+h+5,35),++c;for(var g=0;g<=n;g+=200)l.moveTo(.5+g+h,h),l.lineTo(.5+g+h,i+h);for(g=0;g<=i;g+=40)l.moveTo(h,.5+g+h),l.lineTo(n+h,.5+g+h);l.strokeStyle=\"black\",l.stroke()},this.changeData=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"normal\",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"16px\",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"tahoma\",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\"black\",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:\"left\";if(0!=this.flag)return\"Table has been Pivoted!\";var s=Object.keys(this.data[0]);console.log(s);for(var f=40,c=0;f<i;f+=40){for(var g=0,d=0;g<n;g+=200)l.textAlign=\"\"+o,l.font=e+\" \"+t+\" \"+r,l.fillStyle=\"\"+a,l.clearRect(.5+g+h+5,f,200,40),l.fillText(this.data[c][s[d]],.5+g+h+5,f+40),++d;++c}for(var v=0;v<=n;v+=200)l.moveTo(.5+v+h,h),l.lineTo(.5+v+h,i+h);for(v=0;v<=i;v+=40)l.moveTo(h,.5+v+h),l.lineTo(n+h,.5+v+h);l.strokeStyle=\"black\",l.stroke()},this.pivotTable=function(){if(this.flag=1,arguments.length<3)return\"please pass all the arguments\";for(var e=arguments,t=[],r=[],n=0;n<this.data.length;n++)t.push(this.data[n][arguments[0]]);var i=t.filter(function(e,t,r){return r.indexOf(e)==t});i=i.sort();var h=Object.keys(this.data[0]),s=200*(h.length-(arguments.length-1))+(arguments.length-2)*i.length*200;for(n=0;n<this.data.length;n++)r.push(this.data[n][arguments[arguments.length-1]]);var f=r.filter(function(e,t,r){return r.indexOf(e)==t}),c=40*(f.length+2),g=10;return this.drawPivotBoard=function(){l.clearRect(10.5,10,o.width,o.height);for(var t=0;t<=s;t+=200)l.moveTo(.5+t+g,g),l.lineTo(.5+t+g,c+g);for(t=0;t<=c;t+=40)l.moveTo(g,.5+t+g),l.lineTo(s+g,.5+t+g);l.strokeStyle=\"black\",l.stroke();for(var r=0;r<h.length-1-(e.length-2);r++){if(0==r)var n=11,d=50,v=199,u=3;l.clearRect(n,d,v,u),n+=200}for(var b=0;b<e.length-2;b++){0==b&&(n=200*(h.length-1-(e.length-2))+200+10.5,d=10.5,v=3,u=39.5);for(var p=0;p<i.length;p++){if(p==i.length-1){n+=200;break}l.clearRect(n,d,v,u),n+=200}}l.clearRect(10.5,c+10.5,o.width,o.height),l.clearRect(s+11,9.5,o.width,o.height);for(var y=h,w=y.length-1;w--;)y[w]===e[0]&&y.splice(w,1);for(w=1;w<e.length-1;w++){console.log(e[w]);var m=y.indexOf(e[w]);y.splice(m,1)}for(w=1;w<e.length-1;w++)y.push(e[w]);console.log(y);for(var k=[],R=0;R<f.length;R++){for(var T=[],S=0;S<this.data.length;S++)this.data[S][e[e.length-1]]==f[R]&&T.push(this.data[S]);for(var x=T=T.sort(function(t,r){var a=t[e[0]].toLowerCase(),o=r[e[0]].toLowerCase();return a<o?-1:a>o?1:0}),O=0;O<x.length;O++){for(var B=[],C=0;C<e.length-1;C++)B.push(x[O][e[C]]),delete x[O][e[C]];for(var j=1;j<B.length;j++)for(var L=1;L<e.length-1;L++)x[O][e[L]]=B[j]}k.push(x)}console.log(\"aggregated data: \",k);for(var I=[],V=function(t){M={};for(var r=function(r){for(P=Object.keys(k[t][r]).map(function(e){return k[t][r][e]}),D=Object.keys(k[t][r]),console.log(\"array: \",P),F=0;F<P.length;)if(F<y.length-(e.length-2))M[y[F]]=P[F],++F;else{if(F==y.length)break;\"object\"!=a(M[D[F]])&&(M[D[F]]=[]),M[D[F]].push(P[F]),console.log(P[F]),++F}},o=0;o<k[t].length;o++)r(o);I.push(M)},N=0;N<k.length;N++){var M,P,D,F;V(N)}for(var E=120,J=0,A=0;E<=c;E+=40){for(var K=0,W=0;K<s;K+=200)if(l.font=\"normal 16px tahoma\",l.fillStyle=\"black\",W<y.length-(e.length-2))l.fillText(I[A][h[W]],.5+K+15,E),++W;else{J=i.length;for(var _=0;_<J;_++)void 0==I[A][h[W]][_]||null==I[A][h[W]][_]||\"\"==I[A][h[W]][_]?l.fillText(\"\",.5+K+15,E):l.fillText(I[A][h[W]][_],.5+K+15,E),K+=200;K-=200,++W}if(++A==I.length)break}for(var G=0,H=0;G<=s;G+=200)if(l.font=\"bold 19px Verdana\",l.fillStyle=\"black\",H<y.length-(e.length-2))l.fillText(y[H],.5+G+70,60),++H;else{if(H==y.length)break;1==i.length?(l.fillText(y[H],200*Math.ceil(i.length/2)+(G-160.5)+.5+15,35),++H,G=200*Math.ceil(i.length/2)+(G-160.5)):(l.fillText(y[H],200*Math.ceil(i.length/2)+(G-160.5)+.5+15,35),++H,G=200*Math.ceil(i.length/2)+G)}for(var U=0,Z=0;U<=s;U+=200)if(l.font=\"bold 19px Verdana\",l.fillStyle=\"black\",Z<y.length-(e.length-2))++Z;else{if(Z==h.length)break;for(var Y=i,q=0;q<Y.length;q++)l.fillText(Y[q],.5+U+15,75),U+=200;U-=200,++Z}},this.drawPivotBoard(),!0},this.columnSpan=function(e,t){0==this.flag&&t>1&&e<=Object.keys(this.data[0]).length&&(this.drawBoard=function(){var r=t;n=200*Object.keys(this.data[0]).length+200*(r-1);var a=40*(this.data.length+1),i=10;console.log(o.width),console.log(o.height),l.clearRect(0,0,o.width,o.height);for(var h=0;h<=n;h+=200)l.moveTo(.5+h+i,i),l.lineTo(.5+h+i,a+i);for(h=0;h<=a;h+=40)l.moveTo(i,.5+h+i),l.lineTo(n+i,.5+h+i);l.strokeStyle=\"black\",l.stroke();for(var s=0;s<r-1;s++){var f,c,g,d;0==s&&(f=200*e+i+.5,c=11,g=.5,d=a-1),l.clearRect(f,c,g,d),f+=200}for(var v=Object.keys(this.data[0]),u=80,b=0;u<=a;u+=40){for(var p=0,y=0;p<n;p+=200)l.font=\"normal 16px Verdana\",l.fillStyle=\"black\",y==e-1&&(l.fillText(this.data[b][v[y]],.5+p+i+5,u),++y,p+=200*t),l.fillText(this.data[b][v[y]],.5+p+i+5,u),++y;++b}for(var w=0,m=0;w<n;w+=200)l.font=\"bold 16px Verdana\",l.fillStyle=\"black\",m==e-1?(l.fillText(v[m],.5+w+i+5,35),++m,w+=200*(t-1)):(l.fillText(v[m],.5+w+i+5,35),++m);console.log(\"bh bw:\",a,n),l.clearRect(10,a+11,o.width,o.height),l.clearRect(n+11,9.5,o.width,o.height)},this.drawBoard())},this.rowsSpan=function(e,t){0==this.flag&&t>1&&e<=this.data.length&&(this.drawBoard=function(){var r=t;i=40*(this.data.length+1)+40*(r-1),n=200*Object.keys(this.data[0]).length;var a=10;console.log(o.width),console.log(o.height),l.clearRect(0,0,o.width,o.height);for(var h=0;h<=n;h+=200)l.moveTo(.5+h+a,a),l.lineTo(.5+h+a,i+a);for(h=0;h<=i;h+=40)l.moveTo(a,.5+h+a),l.lineTo(n+a,.5+h+a);l.strokeStyle=\"black\",l.stroke();for(var s=0;s<r-1;s++){for(var f,c,g,d,v=0;v<=n;v+=200)0==s&&(f=11,c=40*(e+1)+a,g=v-1,d=.5),l.clearRect(f,c,g,d);c+=40}for(var u=Object.keys(this.data[0]),b=80,p=0;b<=i;b+=40){for(var y=0,w=0;y<n;y+=200)l.font=\"normal 16px Verdana\",l.fillStyle=\"black\",p==e-1?l.fillText(this.data[p][u[w]],.5+y+a+5,b+(t-1)/2*40):l.fillText(this.data[p][u[w]],.5+y+a+5,b),++w;p==e-1&&(b+=40*(t-1)),++p}for(var m=0,k=0;m<n;m+=200)l.font=\"bold 16px Verdana\",l.fillStyle=\"black\",l.fillText(u[k],.5+m+a+5,35),++k;console.log(\"bh bw:\",i,n),l.clearRect(10,i+11,o.width,o.height),l.clearRect(n+11,9.5,o.width,o.height)},this.drawBoard())},this.mergeRow=function(e,r,a){var s=JSON.parse(sessionStorage.getItem(\"previousState\"));console.log(\"Previous State array: \",s);var f=0;if(null!=s){for(var c=0;c<s.length;c++)if(s[c].column==e){if(r>=s[c].startRow&&r<=s[c].endRow){f=2,alert(\"Invalid argument passed!\");break}if(a>=s[c].startRow&&a<=s[c].endRow){f=2,alert(\"Invalid argument passed!\");break}}0==f&&(f=1)}else f=1;0==this.flag&&1==f&&e<=this.data.length&&a>r&&r!=a&&(l.restore(),this.drawBoard=function(){console.log(\"Canvas Width: \",o.width),console.log(\"Canvas Height: \",o.height);for(var s=0,f=0;s<=i;s+=40){var c,g,d,v;if(f==a-r)break;0==s&&(c=200*(e-1)+11,g=40*(r+1)+h,d=199,v=1),l.clearRect(c,g,d,v),g+=40,++f}for(var u=Object.keys(this.data[0]),b=80,p=0;b<=i;b+=40){for(var y=0,w=0;y<n;y+=200)l.font=\"normal 16px Verdana\",l.fillStyle=\"black\",w+1==e&&p<a&&p+1>r&&(l.clearRect(200*(e-1)+11,40*r+11,199,39+40*(a-r)),l.fillText(this.data[r-1][u[w]],.5+y+h+5,40*(r+1)+(a-r)/2*40)),++w;++p}console.log(\"bh bw:\",i,n),l.clearRect(10,i+11,o.width,o.height),l.clearRect(n+11,9.5,o.width,o.height),l.save();var m={column:e,startRow:r,endRow:a};t.push(m),sessionStorage.setItem(\"previousState\",JSON.stringify(t))},this.drawBoard())},this.mergeColumn=function(e,t,r){var a=JSON.parse(sessionStorage.getItem(\"previousColumnState\"));console.log(\"Previous Column State array: \",a);var s=0;if(null!=a){for(var f=0;f<a.length;f++)if(a[f].column==column){if(startRow>=a[f].startRow&&startRow<=a[f].endRow){s=2,alert(\"Invalid argument passed!\");break}if(endRow>=a[f].startRow&&endRow<=a[f].endRow){s=2,alert(\"Invalid argument passed!\");break}}0==s&&(s=1)}else s=1;0==this.flag&&1==s&&e<=this.data.length+1&&r>t&&t!=r&&(l.restore(),this.drawBoard=function(){console.log(\"Canvas Width: \",o.width),console.log(\"Canvas Height: \",o.height);for(var a=0,s=0;a<=n;a+=200){var f,c,g,d;if(s==r-t)break;0==a&&(f=200*t+h,c=40*(e-1)+11,g=2,d=39),l.clearRect(f,c,g,d),f+=200,++s}for(var v=Object.keys(this.data[0]),u=0,b=1;u<n;u+=200)l.font=\"bold 16px Verdana\",l.fillStyle=\"black\",1==e&&b>=t&&b<r&&(l.clearRect(40*(e-1)+11,200*(t-1)+11,199*(r-t),39),l.fillText(v[t-1],200*t+200*Math.floor((r-t)/2)-100,35)),++b;console.log(\"bh bw:\",i,n),l.clearRect(10,i+11,o.width,o.height),l.clearRect(n+11,9.5,o.width,o.height),l.save()},this.drawBoard())},!0}}]),e}()},function(e,t,r){\"use strict\";var a,o=r(0),l=(a=o)&&a.__esModule?a:{default:a};!function(e){var t,r;void 0===e.Grid&&(e.Grid=((r={}).create=function(e){return t=new l.default,mobx.observable(t),mobx.observable(t.createGrid(\"CITY,ZONE,PRODUCT,WEBVISIT,DOWNLOAD\\n            BLR,KOR,FC,92,96,\\n            BLR,KOR,FB,98,97,\\n            BLR,KOR,FM,67,56,\\n            BLR,INDR,FC,192,196,\\n            BLR,INDR,FB,78,98,\\n            BLR,INDR,FM,12,43,\\n            KOL,SL,FC,122,135,\\n            KOL,SL,FB,123,112\\n            KOL,SL,FM,55,78\")),mobx.observable(t.pivotTable(\"PRODUCT\",\"DOWNLOAD\",\"WEBVISIT\",\"ZONE\")),t},mobx.spy(function(e){e.type&&console.log(e.type+\": \",e)}),r))}(window)}]);","extractedComments":[]}